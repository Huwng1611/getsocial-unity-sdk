#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// #sdk6 #sdk7
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THSuperProperties : TBase
  {
    private string _appId;
    private string _appDeveloperId;
    private string _appDeveloperName;
    private string _city;
    private string _country;
    private string _region;
    private string _userId;
    private string _localTime;
    private string _ip;
    private string _appName;
    private string _appVersionPublic;
    private string _appVersionInternal;
    private string _appPackageName;
    private THSdkRuntime _sdkRuntime;
    private string _sdkRuntimeVersion;
    private string _sdkVersion;
    private string _sdkWrapperVersion;
    private string _sdkLanguage;
    private string _deviceTimezone;
    private THDeviceOs _deviceOs;
    private string _deviceOsVersion;
    private string _deviceCarrier;
    private string _deviceLanguage;
    private string _deviceManufacturer;
    private string _deviceModel;
    private string _deviceIdfa;
    private string _deviceIdfv;
    private string _deviceNetworkType;
    private string _deviceNetworkSubType;
    private bool _deviceJailbroken;
    private bool _isTestDevice;
    private bool _isEmulator;

    /// <summary>
    /// Properties set by Hades
    /// </summary>
    public string AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        this._appId = value;
      }
    }

    /// <summary>
    /// app guid
    /// </summary>
    public string AppDeveloperId
    {
      get
      {
        return _appDeveloperId;
      }
      set
      {
        __isset.appDeveloperId = true;
        this._appDeveloperId = value;
      }
    }

    public string AppDeveloperName
    {
      get
      {
        return _appDeveloperName;
      }
      set
      {
        __isset.appDeveloperName = true;
        this._appDeveloperName = value;
      }
    }

    public string City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        this._city = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    /// <summary>
    /// user guid
    /// </summary>
    public string LocalTime
    {
      get
      {
        return _localTime;
      }
      set
      {
        __isset.localTime = true;
        this._localTime = value;
      }
    }

    /// <summary>
    /// UTC timestamp, seeded by server time
    /// </summary>
    public string Ip
    {
      get
      {
        return _ip;
      }
      set
      {
        __isset.ip = true;
        this._ip = value;
      }
    }

    /// <summary>
    /// Properties set by SDK
    /// </summary>
    public string AppName
    {
      get
      {
        return _appName;
      }
      set
      {
        __isset.appName = true;
        this._appName = value;
      }
    }

    public string AppVersionPublic
    {
      get
      {
        return _appVersionPublic;
      }
      set
      {
        __isset.appVersionPublic = true;
        this._appVersionPublic = value;
      }
    }

    public string AppVersionInternal
    {
      get
      {
        return _appVersionInternal;
      }
      set
      {
        __isset.appVersionInternal = true;
        this._appVersionInternal = value;
      }
    }

    public string AppPackageName
    {
      get
      {
        return _appPackageName;
      }
      set
      {
        __isset.appPackageName = true;
        this._appPackageName = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="THSdkRuntime"/>
    /// </summary>
    public THSdkRuntime SdkRuntime
    {
      get
      {
        return _sdkRuntime;
      }
      set
      {
        __isset.sdkRuntime = true;
        this._sdkRuntime = value;
      }
    }

    public string SdkRuntimeVersion
    {
      get
      {
        return _sdkRuntimeVersion;
      }
      set
      {
        __isset.sdkRuntimeVersion = true;
        this._sdkRuntimeVersion = value;
      }
    }

    public string SdkVersion
    {
      get
      {
        return _sdkVersion;
      }
      set
      {
        __isset.sdkVersion = true;
        this._sdkVersion = value;
      }
    }

    public string SdkWrapperVersion
    {
      get
      {
        return _sdkWrapperVersion;
      }
      set
      {
        __isset.sdkWrapperVersion = true;
        this._sdkWrapperVersion = value;
      }
    }

    public string SdkLanguage
    {
      get
      {
        return _sdkLanguage;
      }
      set
      {
        __isset.sdkLanguage = true;
        this._sdkLanguage = value;
      }
    }

    /// <summary>
    /// Device specific properties
    /// </summary>
    public string DeviceTimezone
    {
      get
      {
        return _deviceTimezone;
      }
      set
      {
        __isset.deviceTimezone = true;
        this._deviceTimezone = value;
      }
    }

    /// <summary>
    /// Europe/Amsterdam
    /// 
    /// <seealso cref="THDeviceOs"/>
    /// </summary>
    public THDeviceOs DeviceOs
    {
      get
      {
        return _deviceOs;
      }
      set
      {
        __isset.deviceOs = true;
        this._deviceOs = value;
      }
    }

    public string DeviceOsVersion
    {
      get
      {
        return _deviceOsVersion;
      }
      set
      {
        __isset.deviceOsVersion = true;
        this._deviceOsVersion = value;
      }
    }

    public string DeviceCarrier
    {
      get
      {
        return _deviceCarrier;
      }
      set
      {
        __isset.deviceCarrier = true;
        this._deviceCarrier = value;
      }
    }

    public string DeviceLanguage
    {
      get
      {
        return _deviceLanguage;
      }
      set
      {
        __isset.deviceLanguage = true;
        this._deviceLanguage = value;
      }
    }

    /// <summary>
    /// e.g pt-BR
    /// </summary>
    public string DeviceManufacturer
    {
      get
      {
        return _deviceManufacturer;
      }
      set
      {
        __isset.deviceManufacturer = true;
        this._deviceManufacturer = value;
      }
    }

    /// <summary>
    /// e.g Samsung
    /// </summary>
    public string DeviceModel
    {
      get
      {
        return _deviceModel;
      }
      set
      {
        __isset.deviceModel = true;
        this._deviceModel = value;
      }
    }

    /// <summary>
    /// e.g Galaxy S7
    /// </summary>
    public string DeviceIdfa
    {
      get
      {
        return _deviceIdfa;
      }
      set
      {
        __isset.deviceIdfa = true;
        this._deviceIdfa = value;
      }
    }

    public string DeviceIdfv
    {
      get
      {
        return _deviceIdfv;
      }
      set
      {
        __isset.deviceIdfv = true;
        this._deviceIdfv = value;
      }
    }

    public string DeviceNetworkType
    {
      get
      {
        return _deviceNetworkType;
      }
      set
      {
        __isset.deviceNetworkType = true;
        this._deviceNetworkType = value;
      }
    }

    /// <summary>
    /// e.g. Mobile or Wifi
    /// </summary>
    public string DeviceNetworkSubType
    {
      get
      {
        return _deviceNetworkSubType;
      }
      set
      {
        __isset.deviceNetworkSubType = true;
        this._deviceNetworkSubType = value;
      }
    }

    /// <summary>
    /// e.g. LTE or 3G
    /// </summary>
    public bool DeviceJailbroken
    {
      get
      {
        return _deviceJailbroken;
      }
      set
      {
        __isset.deviceJailbroken = true;
        this._deviceJailbroken = value;
      }
    }

    public bool IsTestDevice
    {
      get
      {
        return _isTestDevice;
      }
      set
      {
        __isset.isTestDevice = true;
        this._isTestDevice = value;
      }
    }

    public bool IsEmulator
    {
      get
      {
        return _isEmulator;
      }
      set
      {
        __isset.isEmulator = true;
        this._isEmulator = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool appId;
      public bool appDeveloperId;
      public bool appDeveloperName;
      public bool city;
      public bool country;
      public bool region;
      public bool userId;
      public bool localTime;
      public bool ip;
      public bool appName;
      public bool appVersionPublic;
      public bool appVersionInternal;
      public bool appPackageName;
      public bool sdkRuntime;
      public bool sdkRuntimeVersion;
      public bool sdkVersion;
      public bool sdkWrapperVersion;
      public bool sdkLanguage;
      public bool deviceTimezone;
      public bool deviceOs;
      public bool deviceOsVersion;
      public bool deviceCarrier;
      public bool deviceLanguage;
      public bool deviceManufacturer;
      public bool deviceModel;
      public bool deviceIdfa;
      public bool deviceIdfv;
      public bool deviceNetworkType;
      public bool deviceNetworkSubType;
      public bool deviceJailbroken;
      public bool isTestDevice;
      public bool isEmulator;
    }

    public THSuperProperties() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AppId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AppDeveloperId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                AppDeveloperName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                City = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                LocalTime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Ip = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 101:
              if (field.Type == TType.String) {
                AppName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 102:
              if (field.Type == TType.String) {
                AppVersionPublic = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 103:
              if (field.Type == TType.String) {
                AppVersionInternal = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 104:
              if (field.Type == TType.String) {
                AppPackageName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 105:
              if (field.Type == TType.I32) {
                SdkRuntime = (THSdkRuntime)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 106:
              if (field.Type == TType.String) {
                SdkRuntimeVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 107:
              if (field.Type == TType.String) {
                SdkVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 108:
              if (field.Type == TType.String) {
                SdkWrapperVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 109:
              if (field.Type == TType.String) {
                SdkLanguage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 110:
              if (field.Type == TType.String) {
                DeviceTimezone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 112:
              if (field.Type == TType.I32) {
                DeviceOs = (THDeviceOs)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 113:
              if (field.Type == TType.String) {
                DeviceOsVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 114:
              if (field.Type == TType.String) {
                DeviceCarrier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 115:
              if (field.Type == TType.String) {
                DeviceLanguage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 116:
              if (field.Type == TType.String) {
                DeviceManufacturer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 117:
              if (field.Type == TType.String) {
                DeviceModel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 118:
              if (field.Type == TType.String) {
                DeviceIdfa = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 119:
              if (field.Type == TType.String) {
                DeviceIdfv = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 120:
              if (field.Type == TType.String) {
                DeviceNetworkType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 121:
              if (field.Type == TType.String) {
                DeviceNetworkSubType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 122:
              if (field.Type == TType.Bool) {
                DeviceJailbroken = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 123:
              if (field.Type == TType.Bool) {
                IsTestDevice = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 124:
              if (field.Type == TType.Bool) {
                IsEmulator = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THSuperProperties");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AppId != null && __isset.appId) {
          field.Name = "appId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppId);
          oprot.WriteFieldEnd();
        }
        if (AppDeveloperId != null && __isset.appDeveloperId) {
          field.Name = "appDeveloperId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppDeveloperId);
          oprot.WriteFieldEnd();
        }
        if (AppDeveloperName != null && __isset.appDeveloperName) {
          field.Name = "appDeveloperName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppDeveloperName);
          oprot.WriteFieldEnd();
        }
        if (City != null && __isset.city) {
          field.Name = "city";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(City);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (LocalTime != null && __isset.localTime) {
          field.Name = "localTime";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LocalTime);
          oprot.WriteFieldEnd();
        }
        if (Ip != null && __isset.ip) {
          field.Name = "ip";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ip);
          oprot.WriteFieldEnd();
        }
        if (AppName != null && __isset.appName) {
          field.Name = "appName";
          field.Type = TType.String;
          field.ID = 101;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppName);
          oprot.WriteFieldEnd();
        }
        if (AppVersionPublic != null && __isset.appVersionPublic) {
          field.Name = "appVersionPublic";
          field.Type = TType.String;
          field.ID = 102;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppVersionPublic);
          oprot.WriteFieldEnd();
        }
        if (AppVersionInternal != null && __isset.appVersionInternal) {
          field.Name = "appVersionInternal";
          field.Type = TType.String;
          field.ID = 103;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppVersionInternal);
          oprot.WriteFieldEnd();
        }
        if (AppPackageName != null && __isset.appPackageName) {
          field.Name = "appPackageName";
          field.Type = TType.String;
          field.ID = 104;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppPackageName);
          oprot.WriteFieldEnd();
        }
        if (__isset.sdkRuntime) {
          field.Name = "sdkRuntime";
          field.Type = TType.I32;
          field.ID = 105;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SdkRuntime);
          oprot.WriteFieldEnd();
        }
        if (SdkRuntimeVersion != null && __isset.sdkRuntimeVersion) {
          field.Name = "sdkRuntimeVersion";
          field.Type = TType.String;
          field.ID = 106;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SdkRuntimeVersion);
          oprot.WriteFieldEnd();
        }
        if (SdkVersion != null && __isset.sdkVersion) {
          field.Name = "sdkVersion";
          field.Type = TType.String;
          field.ID = 107;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SdkVersion);
          oprot.WriteFieldEnd();
        }
        if (SdkWrapperVersion != null && __isset.sdkWrapperVersion) {
          field.Name = "sdkWrapperVersion";
          field.Type = TType.String;
          field.ID = 108;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SdkWrapperVersion);
          oprot.WriteFieldEnd();
        }
        if (SdkLanguage != null && __isset.sdkLanguage) {
          field.Name = "sdkLanguage";
          field.Type = TType.String;
          field.ID = 109;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SdkLanguage);
          oprot.WriteFieldEnd();
        }
        if (DeviceTimezone != null && __isset.deviceTimezone) {
          field.Name = "deviceTimezone";
          field.Type = TType.String;
          field.ID = 110;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceTimezone);
          oprot.WriteFieldEnd();
        }
        if (__isset.deviceOs) {
          field.Name = "deviceOs";
          field.Type = TType.I32;
          field.ID = 112;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)DeviceOs);
          oprot.WriteFieldEnd();
        }
        if (DeviceOsVersion != null && __isset.deviceOsVersion) {
          field.Name = "deviceOsVersion";
          field.Type = TType.String;
          field.ID = 113;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceOsVersion);
          oprot.WriteFieldEnd();
        }
        if (DeviceCarrier != null && __isset.deviceCarrier) {
          field.Name = "deviceCarrier";
          field.Type = TType.String;
          field.ID = 114;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceCarrier);
          oprot.WriteFieldEnd();
        }
        if (DeviceLanguage != null && __isset.deviceLanguage) {
          field.Name = "deviceLanguage";
          field.Type = TType.String;
          field.ID = 115;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceLanguage);
          oprot.WriteFieldEnd();
        }
        if (DeviceManufacturer != null && __isset.deviceManufacturer) {
          field.Name = "deviceManufacturer";
          field.Type = TType.String;
          field.ID = 116;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceManufacturer);
          oprot.WriteFieldEnd();
        }
        if (DeviceModel != null && __isset.deviceModel) {
          field.Name = "deviceModel";
          field.Type = TType.String;
          field.ID = 117;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceModel);
          oprot.WriteFieldEnd();
        }
        if (DeviceIdfa != null && __isset.deviceIdfa) {
          field.Name = "deviceIdfa";
          field.Type = TType.String;
          field.ID = 118;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceIdfa);
          oprot.WriteFieldEnd();
        }
        if (DeviceIdfv != null && __isset.deviceIdfv) {
          field.Name = "deviceIdfv";
          field.Type = TType.String;
          field.ID = 119;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceIdfv);
          oprot.WriteFieldEnd();
        }
        if (DeviceNetworkType != null && __isset.deviceNetworkType) {
          field.Name = "deviceNetworkType";
          field.Type = TType.String;
          field.ID = 120;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceNetworkType);
          oprot.WriteFieldEnd();
        }
        if (DeviceNetworkSubType != null && __isset.deviceNetworkSubType) {
          field.Name = "deviceNetworkSubType";
          field.Type = TType.String;
          field.ID = 121;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceNetworkSubType);
          oprot.WriteFieldEnd();
        }
        if (__isset.deviceJailbroken) {
          field.Name = "deviceJailbroken";
          field.Type = TType.Bool;
          field.ID = 122;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DeviceJailbroken);
          oprot.WriteFieldEnd();
        }
        if (__isset.isTestDevice) {
          field.Name = "isTestDevice";
          field.Type = TType.Bool;
          field.ID = 123;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsTestDevice);
          oprot.WriteFieldEnd();
        }
        if (__isset.isEmulator) {
          field.Name = "isEmulator";
          field.Type = TType.Bool;
          field.ID = 124;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsEmulator);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THSuperProperties(");
      bool __first = true;
      if (AppId != null && __isset.appId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppId: ");
        __sb.Append(AppId);
      }
      if (AppDeveloperId != null && __isset.appDeveloperId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppDeveloperId: ");
        __sb.Append(AppDeveloperId);
      }
      if (AppDeveloperName != null && __isset.appDeveloperName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppDeveloperName: ");
        __sb.Append(AppDeveloperName);
      }
      if (City != null && __isset.city) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("City: ");
        __sb.Append(City);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (LocalTime != null && __isset.localTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalTime: ");
        __sb.Append(LocalTime);
      }
      if (Ip != null && __isset.ip) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ip: ");
        __sb.Append(Ip);
      }
      if (AppName != null && __isset.appName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppName: ");
        __sb.Append(AppName);
      }
      if (AppVersionPublic != null && __isset.appVersionPublic) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppVersionPublic: ");
        __sb.Append(AppVersionPublic);
      }
      if (AppVersionInternal != null && __isset.appVersionInternal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppVersionInternal: ");
        __sb.Append(AppVersionInternal);
      }
      if (AppPackageName != null && __isset.appPackageName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppPackageName: ");
        __sb.Append(AppPackageName);
      }
      if (__isset.sdkRuntime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkRuntime: ");
        __sb.Append(SdkRuntime);
      }
      if (SdkRuntimeVersion != null && __isset.sdkRuntimeVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkRuntimeVersion: ");
        __sb.Append(SdkRuntimeVersion);
      }
      if (SdkVersion != null && __isset.sdkVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkVersion: ");
        __sb.Append(SdkVersion);
      }
      if (SdkWrapperVersion != null && __isset.sdkWrapperVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkWrapperVersion: ");
        __sb.Append(SdkWrapperVersion);
      }
      if (SdkLanguage != null && __isset.sdkLanguage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SdkLanguage: ");
        __sb.Append(SdkLanguage);
      }
      if (DeviceTimezone != null && __isset.deviceTimezone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceTimezone: ");
        __sb.Append(DeviceTimezone);
      }
      if (__isset.deviceOs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceOs: ");
        __sb.Append(DeviceOs);
      }
      if (DeviceOsVersion != null && __isset.deviceOsVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceOsVersion: ");
        __sb.Append(DeviceOsVersion);
      }
      if (DeviceCarrier != null && __isset.deviceCarrier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceCarrier: ");
        __sb.Append(DeviceCarrier);
      }
      if (DeviceLanguage != null && __isset.deviceLanguage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceLanguage: ");
        __sb.Append(DeviceLanguage);
      }
      if (DeviceManufacturer != null && __isset.deviceManufacturer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceManufacturer: ");
        __sb.Append(DeviceManufacturer);
      }
      if (DeviceModel != null && __isset.deviceModel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceModel: ");
        __sb.Append(DeviceModel);
      }
      if (DeviceIdfa != null && __isset.deviceIdfa) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceIdfa: ");
        __sb.Append(DeviceIdfa);
      }
      if (DeviceIdfv != null && __isset.deviceIdfv) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceIdfv: ");
        __sb.Append(DeviceIdfv);
      }
      if (DeviceNetworkType != null && __isset.deviceNetworkType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceNetworkType: ");
        __sb.Append(DeviceNetworkType);
      }
      if (DeviceNetworkSubType != null && __isset.deviceNetworkSubType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceNetworkSubType: ");
        __sb.Append(DeviceNetworkSubType);
      }
      if (__isset.deviceJailbroken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceJailbroken: ");
        __sb.Append(DeviceJailbroken);
      }
      if (__isset.isTestDevice) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsTestDevice: ");
        __sb.Append(IsTestDevice);
      }
      if (__isset.isEmulator) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsEmulator: ");
        __sb.Append(IsEmulator);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
