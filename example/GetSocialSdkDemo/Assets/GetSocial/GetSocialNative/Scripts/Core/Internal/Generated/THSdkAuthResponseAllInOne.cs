#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class THSdkAuthResponseAllInOne : TBase
{
  private THSdkAuthResponse _sdkAuthResponse;
  private THTokenInfo _tokenInfo;
  private THInviteProviders _inviteProviders;

  public THSdkAuthResponse SdkAuthResponse
  {
    get
    {
      return _sdkAuthResponse;
    }
    set
    {
      __isset.sdkAuthResponse = true;
      this._sdkAuthResponse = value;
    }
  }

  public THTokenInfo TokenInfo
  {
    get
    {
      return _tokenInfo;
    }
    set
    {
      __isset.tokenInfo = true;
      this._tokenInfo = value;
    }
  }

  public THInviteProviders InviteProviders
  {
    get
    {
      return _inviteProviders;
    }
    set
    {
      __isset.inviteProviders = true;
      this._inviteProviders = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sdkAuthResponse;
    public bool tokenInfo;
    public bool inviteProviders;
  }

  public THSdkAuthResponseAllInOne() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              SdkAuthResponse = new THSdkAuthResponse();
              SdkAuthResponse.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              TokenInfo = new THTokenInfo();
              TokenInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              InviteProviders = new THInviteProviders();
              InviteProviders.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("THSdkAuthResponseAllInOne");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SdkAuthResponse != null && __isset.sdkAuthResponse) {
        field.Name = "sdkAuthResponse";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        SdkAuthResponse.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TokenInfo != null && __isset.tokenInfo) {
        field.Name = "tokenInfo";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        TokenInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (InviteProviders != null && __isset.inviteProviders) {
        field.Name = "inviteProviders";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        InviteProviders.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("THSdkAuthResponseAllInOne(");
    bool __first = true;
    if (SdkAuthResponse != null && __isset.sdkAuthResponse) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SdkAuthResponse: ");
      __sb.Append(SdkAuthResponse);
    }
    if (TokenInfo != null && __isset.tokenInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TokenInfo: ");
      __sb.Append(TokenInfo== null ? "<null>" : TokenInfo.ToString());
    }
    if (InviteProviders != null && __isset.inviteProviders) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InviteProviders: ");
      __sb.Append(InviteProviders== null ? "<null>" : InviteProviders.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
