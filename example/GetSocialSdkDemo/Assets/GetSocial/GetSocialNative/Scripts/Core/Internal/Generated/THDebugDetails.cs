#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THDebugDetails : TBase
  {
    private bool _sameUser;
    private bool _deviceSeen;
    private bool _isTestDevice;
    private bool _firstMatch;
    private bool _firstMatchLink;
    private bool _guaranteedMatch;
    private THTrackStatus _status;
    private bool _cookieDeviceChanged;
    private bool _jailbroken;
    private bool _tooManyRefs;
    private bool _sameIp;
    private bool _invalidClickTime;

    public bool SameUser
    {
      get
      {
        return _sameUser;
      }
      set
      {
        __isset.sameUser = true;
        this._sameUser = value;
      }
    }

    public bool DeviceSeen
    {
      get
      {
        return _deviceSeen;
      }
      set
      {
        __isset.deviceSeen = true;
        this._deviceSeen = value;
      }
    }

    public bool IsTestDevice
    {
      get
      {
        return _isTestDevice;
      }
      set
      {
        __isset.isTestDevice = true;
        this._isTestDevice = value;
      }
    }

    public bool FirstMatch
    {
      get
      {
        return _firstMatch;
      }
      set
      {
        __isset.firstMatch = true;
        this._firstMatch = value;
      }
    }

    public bool FirstMatchLink
    {
      get
      {
        return _firstMatchLink;
      }
      set
      {
        __isset.firstMatchLink = true;
        this._firstMatchLink = value;
      }
    }

    public bool GuaranteedMatch
    {
      get
      {
        return _guaranteedMatch;
      }
      set
      {
        __isset.guaranteedMatch = true;
        this._guaranteedMatch = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="THTrackStatus"/>
    /// </summary>
    public THTrackStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public bool CookieDeviceChanged
    {
      get
      {
        return _cookieDeviceChanged;
      }
      set
      {
        __isset.cookieDeviceChanged = true;
        this._cookieDeviceChanged = value;
      }
    }

    public bool Jailbroken
    {
      get
      {
        return _jailbroken;
      }
      set
      {
        __isset.jailbroken = true;
        this._jailbroken = value;
      }
    }

    public bool TooManyRefs
    {
      get
      {
        return _tooManyRefs;
      }
      set
      {
        __isset.tooManyRefs = true;
        this._tooManyRefs = value;
      }
    }

    public bool SameIp
    {
      get
      {
        return _sameIp;
      }
      set
      {
        __isset.sameIp = true;
        this._sameIp = value;
      }
    }

    public bool InvalidClickTime
    {
      get
      {
        return _invalidClickTime;
      }
      set
      {
        __isset.invalidClickTime = true;
        this._invalidClickTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sameUser;
      public bool deviceSeen;
      public bool isTestDevice;
      public bool firstMatch;
      public bool firstMatchLink;
      public bool guaranteedMatch;
      public bool status;
      public bool cookieDeviceChanged;
      public bool jailbroken;
      public bool tooManyRefs;
      public bool sameIp;
      public bool invalidClickTime;
    }

    public THDebugDetails() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                SameUser = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                DeviceSeen = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IsTestDevice = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                FirstMatch = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                FirstMatchLink = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                GuaranteedMatch = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                Status = (THTrackStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                CookieDeviceChanged = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                Jailbroken = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                TooManyRefs = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                SameIp = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                InvalidClickTime = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THDebugDetails");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sameUser) {
          field.Name = "sameUser";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(SameUser);
          oprot.WriteFieldEnd();
        }
        if (__isset.deviceSeen) {
          field.Name = "deviceSeen";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DeviceSeen);
          oprot.WriteFieldEnd();
        }
        if (__isset.isTestDevice) {
          field.Name = "isTestDevice";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsTestDevice);
          oprot.WriteFieldEnd();
        }
        if (__isset.firstMatch) {
          field.Name = "firstMatch";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(FirstMatch);
          oprot.WriteFieldEnd();
        }
        if (__isset.firstMatchLink) {
          field.Name = "firstMatchLink";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(FirstMatchLink);
          oprot.WriteFieldEnd();
        }
        if (__isset.guaranteedMatch) {
          field.Name = "guaranteedMatch";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(GuaranteedMatch);
          oprot.WriteFieldEnd();
        }
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Status);
          oprot.WriteFieldEnd();
        }
        if (__isset.cookieDeviceChanged) {
          field.Name = "cookieDeviceChanged";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(CookieDeviceChanged);
          oprot.WriteFieldEnd();
        }
        if (__isset.jailbroken) {
          field.Name = "jailbroken";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Jailbroken);
          oprot.WriteFieldEnd();
        }
        if (__isset.tooManyRefs) {
          field.Name = "tooManyRefs";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(TooManyRefs);
          oprot.WriteFieldEnd();
        }
        if (__isset.sameIp) {
          field.Name = "sameIp";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(SameIp);
          oprot.WriteFieldEnd();
        }
        if (__isset.invalidClickTime) {
          field.Name = "invalidClickTime";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(InvalidClickTime);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THDebugDetails(");
      bool __first = true;
      if (__isset.sameUser) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SameUser: ");
        __sb.Append(SameUser);
      }
      if (__isset.deviceSeen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceSeen: ");
        __sb.Append(DeviceSeen);
      }
      if (__isset.isTestDevice) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsTestDevice: ");
        __sb.Append(IsTestDevice);
      }
      if (__isset.firstMatch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstMatch: ");
        __sb.Append(FirstMatch);
      }
      if (__isset.firstMatchLink) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstMatchLink: ");
        __sb.Append(FirstMatchLink);
      }
      if (__isset.guaranteedMatch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GuaranteedMatch: ");
        __sb.Append(GuaranteedMatch);
      }
      if (__isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status);
      }
      if (__isset.cookieDeviceChanged) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CookieDeviceChanged: ");
        __sb.Append(CookieDeviceChanged);
      }
      if (__isset.jailbroken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Jailbroken: ");
        __sb.Append(Jailbroken);
      }
      if (__isset.tooManyRefs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TooManyRefs: ");
        __sb.Append(TooManyRefs);
      }
      if (__isset.sameIp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SameIp: ");
        __sb.Append(SameIp);
      }
      if (__isset.invalidClickTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvalidClickTime: ");
        __sb.Append(InvalidClickTime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
