#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class THSdkAuthResponse : TBase
{
  private string _sessionId;
  private THPrivateUser _user;
  private long _serverTime;
  private THAppPlatformProperties _appPlatformProperties;
  private bool _firstSession;
  private THApplicationInfo _applicationInfo;
  private string _uploadEndpoint;
  private THUploadChunkSize _uploadChunkSize;
  private long _uploadFileSizeLimit;

  public string SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  public THPrivateUser User
  {
    get
    {
      return _user;
    }
    set
    {
      __isset.user = true;
      this._user = value;
    }
  }

  public long ServerTime
  {
    get
    {
      return _serverTime;
    }
    set
    {
      __isset.serverTime = true;
      this._serverTime = value;
    }
  }

  public THAppPlatformProperties AppPlatformProperties
  {
    get
    {
      return _appPlatformProperties;
    }
    set
    {
      __isset.appPlatformProperties = true;
      this._appPlatformProperties = value;
    }
  }

  public bool FirstSession
  {
    get
    {
      return _firstSession;
    }
    set
    {
      __isset.firstSession = true;
      this._firstSession = value;
    }
  }

  public THApplicationInfo ApplicationInfo
  {
    get
    {
      return _applicationInfo;
    }
    set
    {
      __isset.applicationInfo = true;
      this._applicationInfo = value;
    }
  }

  /// <summary>
  /// Tus compliant upload endpoint of Atlas
  /// </summary>
  public string UploadEndpoint
  {
    get
    {
      return _uploadEndpoint;
    }
    set
    {
      __isset.uploadEndpoint = true;
      this._uploadEndpoint = value;
    }
  }

  public THUploadChunkSize UploadChunkSize
  {
    get
    {
      return _uploadChunkSize;
    }
    set
    {
      __isset.uploadChunkSize = true;
      this._uploadChunkSize = value;
    }
  }

  public long UploadFileSizeLimit
  {
    get
    {
      return _uploadFileSizeLimit;
    }
    set
    {
      __isset.uploadFileSizeLimit = true;
      this._uploadFileSizeLimit = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sessionId;
    public bool user;
    public bool serverTime;
    public bool appPlatformProperties;
    public bool firstSession;
    public bool applicationInfo;
    public bool uploadEndpoint;
    public bool uploadChunkSize;
    public bool uploadFileSizeLimit;
  }

  public THSdkAuthResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SessionId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              User = new THPrivateUser();
              User.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              ServerTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              AppPlatformProperties = new THAppPlatformProperties();
              AppPlatformProperties.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              FirstSession = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              ApplicationInfo = new THApplicationInfo();
              ApplicationInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              UploadEndpoint = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              UploadChunkSize = new THUploadChunkSize();
              UploadChunkSize.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              UploadFileSizeLimit = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("THSdkAuthResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SessionId != null && __isset.sessionId) {
        field.Name = "sessionId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionId);
        oprot.WriteFieldEnd();
      }
      if (User != null && __isset.user) {
        field.Name = "user";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        User.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.serverTime) {
        field.Name = "serverTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ServerTime);
        oprot.WriteFieldEnd();
      }
      if (AppPlatformProperties != null && __isset.appPlatformProperties) {
        field.Name = "appPlatformProperties";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        AppPlatformProperties.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.firstSession) {
        field.Name = "firstSession";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(FirstSession);
        oprot.WriteFieldEnd();
      }
      if (ApplicationInfo != null && __isset.applicationInfo) {
        field.Name = "applicationInfo";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        ApplicationInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UploadEndpoint != null && __isset.uploadEndpoint) {
        field.Name = "uploadEndpoint";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UploadEndpoint);
        oprot.WriteFieldEnd();
      }
      if (UploadChunkSize != null && __isset.uploadChunkSize) {
        field.Name = "uploadChunkSize";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        UploadChunkSize.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.uploadFileSizeLimit) {
        field.Name = "uploadFileSizeLimit";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UploadFileSizeLimit);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("THSdkAuthResponse(");
    bool __first = true;
    if (SessionId != null && __isset.sessionId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionId: ");
      __sb.Append(SessionId);
    }
    if (User != null && __isset.user) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("User: ");
      __sb.Append(User== null ? "<null>" : User.ToString());
    }
    if (__isset.serverTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ServerTime: ");
      __sb.Append(ServerTime);
    }
    if (AppPlatformProperties != null && __isset.appPlatformProperties) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AppPlatformProperties: ");
      __sb.Append(AppPlatformProperties== null ? "<null>" : AppPlatformProperties.ToString());
    }
    if (__isset.firstSession) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FirstSession: ");
      __sb.Append(FirstSession);
    }
    if (ApplicationInfo != null && __isset.applicationInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ApplicationInfo: ");
      __sb.Append(ApplicationInfo== null ? "<null>" : ApplicationInfo.ToString());
    }
    if (UploadEndpoint != null && __isset.uploadEndpoint) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UploadEndpoint: ");
      __sb.Append(UploadEndpoint);
    }
    if (UploadChunkSize != null && __isset.uploadChunkSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UploadChunkSize: ");
      __sb.Append(UploadChunkSize== null ? "<null>" : UploadChunkSize.ToString());
    }
    if (__isset.uploadFileSizeLimit) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UploadFileSizeLimit: ");
      __sb.Append(UploadFileSizeLimit);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
