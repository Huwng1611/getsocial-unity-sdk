#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AFActivity : TBase
{
  private string _id;
  private Dictionary<string, AFContent> _content;
  private string _contentType;
  private AFUserReactions _reactions;
  private Dictionary<string, string> _properties;
  private THCreator _author;
  private long _createdAt;
  private bool _isAnnouncement;
  private Dictionary<string, List<AFMention>> _mentions;
  private AFEntityReference _source;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public Dictionary<string, AFContent> Content
  {
    get
    {
      return _content;
    }
    set
    {
      __isset.content = true;
      this._content = value;
    }
  }

  public string ContentType
  {
    get
    {
      return _contentType;
    }
    set
    {
      __isset.contentType = true;
      this._contentType = value;
    }
  }

  /// <summary>
  /// post, comment, friend_rel_created, custom
  /// </summary>
  public AFUserReactions Reactions
  {
    get
    {
      return _reactions;
    }
    set
    {
      __isset.reactions = true;
      this._reactions = value;
    }
  }

  public Dictionary<string, string> Properties
  {
    get
    {
      return _properties;
    }
    set
    {
      __isset.properties = true;
      this._properties = value;
    }
  }

  public THCreator Author
  {
    get
    {
      return _author;
    }
    set
    {
      __isset.author = true;
      this._author = value;
    }
  }

  public long CreatedAt
  {
    get
    {
      return _createdAt;
    }
    set
    {
      __isset.createdAt = true;
      this._createdAt = value;
    }
  }

  public bool IsAnnouncement
  {
    get
    {
      return _isAnnouncement;
    }
    set
    {
      __isset.isAnnouncement = true;
      this._isAnnouncement = value;
    }
  }

  public Dictionary<string, List<AFMention>> Mentions
  {
    get
    {
      return _mentions;
    }
    set
    {
      __isset.mentions = true;
      this._mentions = value;
    }
  }

  public AFEntityReference Source
  {
    get
    {
      return _source;
    }
    set
    {
      __isset.source = true;
      this._source = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool content;
    public bool contentType;
    public bool reactions;
    public bool properties;
    public bool author;
    public bool createdAt;
    public bool isAnnouncement;
    public bool mentions;
    public bool source;
  }

  public AFActivity() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Content = new Dictionary<string, AFContent>();
                TMap _map29 = iprot.ReadMapBegin();
                for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                {
                  string _key31;
                  AFContent _val32;
                  _key31 = iprot.ReadString();
                  _val32 = new AFContent();
                  _val32.Read(iprot);
                  Content[_key31] = _val32;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ContentType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Reactions = new AFUserReactions();
              Reactions.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                Properties = new Dictionary<string, string>();
                TMap _map33 = iprot.ReadMapBegin();
                for( int _i34 = 0; _i34 < _map33.Count; ++_i34)
                {
                  string _key35;
                  string _val36;
                  _key35 = iprot.ReadString();
                  _val36 = iprot.ReadString();
                  Properties[_key35] = _val36;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              Author = new THCreator();
              Author.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              CreatedAt = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              IsAnnouncement = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                Mentions = new Dictionary<string, List<AFMention>>();
                TMap _map37 = iprot.ReadMapBegin();
                for( int _i38 = 0; _i38 < _map37.Count; ++_i38)
                {
                  string _key39;
                  List<AFMention> _val40;
                  _key39 = iprot.ReadString();
                  {
                    _val40 = new List<AFMention>();
                    TList _list41 = iprot.ReadListBegin();
                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                    {
                      AFMention _elem43;
                      _elem43 = new AFMention();
                      _elem43.Read(iprot);
                      _val40.Add(_elem43);
                    }
                    iprot.ReadListEnd();
                  }
                  Mentions[_key39] = _val40;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Source = new AFEntityReference();
              Source.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AFActivity");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Content.Count));
          foreach (string _iter44 in Content.Keys)
          {
            oprot.WriteString(_iter44);
            Content[_iter44].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ContentType != null && __isset.contentType) {
        field.Name = "contentType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContentType);
        oprot.WriteFieldEnd();
      }
      if (Reactions != null && __isset.reactions) {
        field.Name = "reactions";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Reactions.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Properties != null && __isset.properties) {
        field.Name = "properties";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
          foreach (string _iter45 in Properties.Keys)
          {
            oprot.WriteString(_iter45);
            oprot.WriteString(Properties[_iter45]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Author != null && __isset.author) {
        field.Name = "author";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        Author.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdAt) {
        field.Name = "createdAt";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedAt);
        oprot.WriteFieldEnd();
      }
      if (__isset.isAnnouncement) {
        field.Name = "isAnnouncement";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsAnnouncement);
        oprot.WriteFieldEnd();
      }
      if (Mentions != null && __isset.mentions) {
        field.Name = "mentions";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.List, Mentions.Count));
          foreach (string _iter46 in Mentions.Keys)
          {
            oprot.WriteString(_iter46);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Mentions[_iter46].Count));
              foreach (AFMention _iter47 in Mentions[_iter46])
              {
                _iter47.Write(oprot);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.source) {
        field.Name = "source";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Source.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AFActivity(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Content != null && __isset.content) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Content: ");
      __sb.Append(Content);
    }
    if (ContentType != null && __isset.contentType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContentType: ");
      __sb.Append(ContentType);
    }
    if (Reactions != null && __isset.reactions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Reactions: ");
      __sb.Append(Reactions== null ? "<null>" : Reactions.ToString());
    }
    if (Properties != null && __isset.properties) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Properties: ");
      __sb.Append(Properties);
    }
    if (Author != null && __isset.author) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Author: ");
      __sb.Append(Author== null ? "<null>" : Author.ToString());
    }
    if (__isset.createdAt) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreatedAt: ");
      __sb.Append(CreatedAt);
    }
    if (__isset.isAnnouncement) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IsAnnouncement: ");
      __sb.Append(IsAnnouncement);
    }
    if (Mentions != null && __isset.mentions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Mentions: ");
      __sb.Append(Mentions);
    }
    if (Source != null && __isset.source) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Source: ");
      __sb.Append(Source);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
