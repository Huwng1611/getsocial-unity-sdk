#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ValidateDomainResponse : TBase
  {
    private bool _isValid;
    private bool _isConfigured;
    private bool _isRootDomain;

    public bool IsValid
    {
      get
      {
        return _isValid;
      }
      set
      {
        __isset.isValid = true;
        this._isValid = value;
      }
    }

    /// <summary>
    /// whether this is an actual domain or not
    /// </summary>
    public bool IsConfigured
    {
      get
      {
        return _isConfigured;
      }
      set
      {
        __isset.isConfigured = true;
        this._isConfigured = value;
      }
    }

    /// <summary>
    /// whether the domain is correctly configured for GetSocial
    /// </summary>
    public bool IsRootDomain
    {
      get
      {
        return _isRootDomain;
      }
      set
      {
        __isset.isRootDomain = true;
        this._isRootDomain = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool isValid;
      public bool isConfigured;
      public bool isRootDomain;
    }

    public ValidateDomainResponse() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                IsValid = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IsConfigured = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IsRootDomain = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ValidateDomainResponse");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.isValid) {
          field.Name = "isValid";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsValid);
          oprot.WriteFieldEnd();
        }
        if (__isset.isConfigured) {
          field.Name = "isConfigured";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsConfigured);
          oprot.WriteFieldEnd();
        }
        if (__isset.isRootDomain) {
          field.Name = "isRootDomain";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsRootDomain);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ValidateDomainResponse(");
      bool __first = true;
      if (__isset.isValid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsValid: ");
        __sb.Append(IsValid);
      }
      if (__isset.isConfigured) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsConfigured: ");
        __sb.Append(IsConfigured);
      }
      if (__isset.isRootDomain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsRootDomain: ");
        __sb.Append(IsRootDomain);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
