#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THNotificationTemplate : TBase
  {
    private string _id;
    private string _name;
    private string _description;
    private string _appId;
    private string _messageType;
    private Dictionary<string, string> _text;
    private Dictionary<string, string> _title;
    private string _image;
    private string _video;
    private int _createdAt;
    private string _createUserId;
    private int _createdUserRole;
    private THAction _action;
    private List<THActionButtonLocalized> _actionButtons;
    private int _expiryMin;
    private THNotificationTemplateMedia _media;
    private Dictionary<THDeviceOs, THNotificationTemplateMedia> _platformMedia;
    private THBadge _badge;
    private THNotificationTemplateProperties _properties;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public string AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        this._appId = value;
      }
    }

    public string MessageType
    {
      get
      {
        return _messageType;
      }
      set
      {
        __isset.messageType = true;
        this._messageType = value;
      }
    }

    public Dictionary<string, string> Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }

    public Dictionary<string, string> Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public string Video
    {
      get
      {
        return _video;
      }
      set
      {
        __isset.video = true;
        this._video = value;
      }
    }

    public int CreatedAt
    {
      get
      {
        return _createdAt;
      }
      set
      {
        __isset.createdAt = true;
        this._createdAt = value;
      }
    }

    public string CreateUserId
    {
      get
      {
        return _createUserId;
      }
      set
      {
        __isset.createUserId = true;
        this._createUserId = value;
      }
    }

    public int CreatedUserRole
    {
      get
      {
        return _createdUserRole;
      }
      set
      {
        __isset.createdUserRole = true;
        this._createdUserRole = value;
      }
    }

    public THAction Action
    {
      get
      {
        return _action;
      }
      set
      {
        __isset.action = true;
        this._action = value;
      }
    }

    public List<THActionButtonLocalized> ActionButtons
    {
      get
      {
        return _actionButtons;
      }
      set
      {
        __isset.actionButtons = true;
        this._actionButtons = value;
      }
    }

    public int ExpiryMin
    {
      get
      {
        return _expiryMin;
      }
      set
      {
        __isset.expiryMin = true;
        this._expiryMin = value;
      }
    }

    public THNotificationTemplateMedia Media
    {
      get
      {
        return _media;
      }
      set
      {
        __isset.media = true;
        this._media = value;
      }
    }

    public Dictionary<THDeviceOs, THNotificationTemplateMedia> PlatformMedia
    {
      get
      {
        return _platformMedia;
      }
      set
      {
        __isset.platformMedia = true;
        this._platformMedia = value;
      }
    }

    public THBadge Badge
    {
      get
      {
        return _badge;
      }
      set
      {
        __isset.badge = true;
        this._badge = value;
      }
    }

    public THNotificationTemplateProperties Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool description;
      public bool appId;
      public bool messageType;
      public bool text;
      public bool title;
      public bool image;
      public bool video;
      public bool createdAt;
      public bool createUserId;
      public bool createdUserRole;
      public bool action;
      public bool actionButtons;
      public bool expiryMin;
      public bool media;
      public bool platformMedia;
      public bool badge;
      public bool properties;
    }

    public THNotificationTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                AppId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                MessageType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Map) {
                {
                  Text = new Dictionary<string, string>();
                  TMap _map5 = iprot.ReadMapBegin();
                  for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                  {
                    string _key7;
                    string _val8;
                    _key7 = iprot.ReadString();
                    _val8 = iprot.ReadString();
                    Text[_key7] = _val8;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Map) {
                {
                  Title = new Dictionary<string, string>();
                  TMap _map9 = iprot.ReadMapBegin();
                  for( int _i10 = 0; _i10 < _map9.Count; ++_i10)
                  {
                    string _key11;
                    string _val12;
                    _key11 = iprot.ReadString();
                    _val12 = iprot.ReadString();
                    Title[_key11] = _val12;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Image = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Video = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                CreatedAt = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                CreateUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                CreatedUserRole = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                Action = new THAction();
                Action.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.List) {
                {
                  ActionButtons = new List<THActionButtonLocalized>();
                  TList _list13 = iprot.ReadListBegin();
                  for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                  {
                    THActionButtonLocalized _elem15;
                    _elem15 = new THActionButtonLocalized();
                    _elem15.Read(iprot);
                    ActionButtons.Add(_elem15);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.I32) {
                ExpiryMin = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Struct) {
                Media = new THNotificationTemplateMedia();
                Media.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Map) {
                {
                  PlatformMedia = new Dictionary<THDeviceOs, THNotificationTemplateMedia>();
                  TMap _map16 = iprot.ReadMapBegin();
                  for( int _i17 = 0; _i17 < _map16.Count; ++_i17)
                  {
                    THDeviceOs _key18;
                    THNotificationTemplateMedia _val19;
                    _key18 = (THDeviceOs)iprot.ReadI32();
                    _val19 = new THNotificationTemplateMedia();
                    _val19.Read(iprot);
                    PlatformMedia[_key18] = _val19;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.Struct) {
                Badge = new THBadge();
                Badge.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Struct) {
                Properties = new THNotificationTemplateProperties();
                Properties.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THNotificationTemplate");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (AppId != null && __isset.appId) {
          field.Name = "appId";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppId);
          oprot.WriteFieldEnd();
        }
        if (MessageType != null && __isset.messageType) {
          field.Name = "messageType";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageType);
          oprot.WriteFieldEnd();
        }
        if (Text != null && __isset.text) {
          field.Name = "text";
          field.Type = TType.Map;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Text.Count));
            foreach (string _iter20 in Text.Keys)
            {
              oprot.WriteString(_iter20);
              oprot.WriteString(Text[_iter20]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.Map;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Title.Count));
            foreach (string _iter21 in Title.Keys)
            {
              oprot.WriteString(_iter21);
              oprot.WriteString(Title[_iter21]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Image);
          oprot.WriteFieldEnd();
        }
        if (Video != null && __isset.video) {
          field.Name = "video";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Video);
          oprot.WriteFieldEnd();
        }
        if (__isset.createdAt) {
          field.Name = "createdAt";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CreatedAt);
          oprot.WriteFieldEnd();
        }
        if (CreateUserId != null && __isset.createUserId) {
          field.Name = "createUserId";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CreateUserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.createdUserRole) {
          field.Name = "createdUserRole";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CreatedUserRole);
          oprot.WriteFieldEnd();
        }
        if (Action != null && __isset.action) {
          field.Name = "action";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          Action.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ActionButtons != null && __isset.actionButtons) {
          field.Name = "actionButtons";
          field.Type = TType.List;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ActionButtons.Count));
            foreach (THActionButtonLocalized _iter22 in ActionButtons)
            {
              _iter22.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.expiryMin) {
          field.Name = "expiryMin";
          field.Type = TType.I32;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpiryMin);
          oprot.WriteFieldEnd();
        }
        if (Media != null && __isset.media) {
          field.Name = "media";
          field.Type = TType.Struct;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          Media.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PlatformMedia != null && __isset.platformMedia) {
          field.Name = "platformMedia";
          field.Type = TType.Map;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, PlatformMedia.Count));
            foreach (THDeviceOs _iter23 in PlatformMedia.Keys)
            {
              oprot.WriteI32((int)_iter23);
              PlatformMedia[_iter23].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Badge != null && __isset.badge) {
          field.Name = "badge";
          field.Type = TType.Struct;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          Badge.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.properties) {
          field.Name = "properties";
          field.Type = TType.Struct;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          Properties.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THNotificationTemplate(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (AppId != null && __isset.appId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppId: ");
        __sb.Append(AppId);
      }
      if (MessageType != null && __isset.messageType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageType: ");
        __sb.Append(MessageType);
      }
      if (Text != null && __isset.text) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Text: ");
        __sb.Append(Text.ToDebugString());
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title.ToDebugString());
      }
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (Video != null && __isset.video) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Video: ");
        __sb.Append(Video);
      }
      if (__isset.createdAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedAt: ");
        __sb.Append(CreatedAt);
      }
      if (CreateUserId != null && __isset.createUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreateUserId: ");
        __sb.Append(CreateUserId);
      }
      if (__isset.createdUserRole) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedUserRole: ");
        __sb.Append(CreatedUserRole);
      }
      if (Action != null && __isset.action) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Action: ");
        __sb.Append(Action== null ? "<null>" : Action.ToString());
      }
      if (ActionButtons != null && __isset.actionButtons) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionButtons: ");
        __sb.Append(ActionButtons.ToDebugString());
      }
      if (__isset.expiryMin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpiryMin: ");
        __sb.Append(ExpiryMin);
      }
      if (Media != null && __isset.media) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Media: ");
        __sb.Append(Media== null ? "<null>" : Media.ToString());
      }
      if (PlatformMedia != null && __isset.platformMedia) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PlatformMedia: ");
        __sb.Append(PlatformMedia.ToDebugString());
      }
      if (Badge != null && __isset.badge) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Badge: ");
        __sb.Append(Badge== null ? "<null>" : Badge.ToString());
      }
      if (Properties != null && __isset.properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties== null ? "<null>" : Properties.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
