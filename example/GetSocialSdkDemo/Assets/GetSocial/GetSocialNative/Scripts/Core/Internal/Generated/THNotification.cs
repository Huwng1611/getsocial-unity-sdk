#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class THNotification : TBase
{
  private string _id;
  private int _createdAt;
  private int _type;
  private bool _isRead;
  private int _actionType;
  private Dictionary<string, string> _actionsArgs;
  private string _text;
  private string _title;
  private THPostAuthor _origin;
  private string _image;
  private string _video;
  private THAction _action;
  private string _typeStr;
  private string _status;
  private List<THActionButton> _actionButtons;
  private int _expiration;
  private THNotificationTemplateMedia _media;

  /// <summary>
  /// but we need it on backend
  /// </summary>
  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public int CreatedAt
  {
    get
    {
      return _createdAt;
    }
    set
    {
      __isset.createdAt = true;
      this._createdAt = value;
    }
  }

  public int Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public bool IsRead
  {
    get
    {
      return _isRead;
    }
    set
    {
      __isset.isRead = true;
      this._isRead = value;
    }
  }

  public int ActionType
  {
    get
    {
      return _actionType;
    }
    set
    {
      __isset.actionType = true;
      this._actionType = value;
    }
  }

  public Dictionary<string, string> ActionsArgs
  {
    get
    {
      return _actionsArgs;
    }
    set
    {
      __isset.actionsArgs = true;
      this._actionsArgs = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  public THPostAuthor Origin
  {
    get
    {
      return _origin;
    }
    set
    {
      __isset.origin = true;
      this._origin = value;
    }
  }

  public string Image
  {
    get
    {
      return _image;
    }
    set
    {
      __isset.image = true;
      this._image = value;
    }
  }

  public string Video
  {
    get
    {
      return _video;
    }
    set
    {
      __isset.video = true;
      this._video = value;
    }
  }

  public THAction Action
  {
    get
    {
      return _action;
    }
    set
    {
      __isset.action = true;
      this._action = value;
    }
  }

  public string TypeStr
  {
    get
    {
      return _typeStr;
    }
    set
    {
      __isset.typeStr = true;
      this._typeStr = value;
    }
  }

  public string Status
  {
    get
    {
      return _status;
    }
    set
    {
      __isset.status = true;
      this._status = value;
    }
  }

  public List<THActionButton> ActionButtons
  {
    get
    {
      return _actionButtons;
    }
    set
    {
      __isset.actionButtons = true;
      this._actionButtons = value;
    }
  }

  public int Expiration
  {
    get
    {
      return _expiration;
    }
    set
    {
      __isset.expiration = true;
      this._expiration = value;
    }
  }

  public THNotificationTemplateMedia Media
  {
    get
    {
      return _media;
    }
    set
    {
      __isset.media = true;
      this._media = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool createdAt;
    public bool type;
    public bool isRead;
    public bool actionType;
    public bool actionsArgs;
    public bool text;
    public bool title;
    public bool origin;
    public bool image;
    public bool video;
    public bool action;
    public bool typeStr;
    public bool status;
    public bool actionButtons;
    public bool expiration;
    public bool media;
  }

  public THNotification() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              CreatedAt = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsRead = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              ActionType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                ActionsArgs = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  ActionsArgs[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              Origin = new THPostAuthor();
              Origin.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Image = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Video = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              Action = new THAction();
              Action.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              TypeStr = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Status = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                ActionButtons = new List<THActionButton>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  THActionButton _elem6;
                  _elem6 = new THActionButton();
                  _elem6.Read(iprot);
                  ActionButtons.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I32) {
              Expiration = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Struct) {
              Media = new THNotificationTemplateMedia();
              Media.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("THNotification");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdAt) {
        field.Name = "createdAt";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CreatedAt);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.isRead) {
        field.Name = "isRead";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsRead);
        oprot.WriteFieldEnd();
      }
      if (__isset.actionType) {
        field.Name = "actionType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActionType);
        oprot.WriteFieldEnd();
      }
      if (ActionsArgs != null && __isset.actionsArgs) {
        field.Name = "actionsArgs";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ActionsArgs.Count));
          foreach (string _iter7 in ActionsArgs.Keys)
          {
            oprot.WriteString(_iter7);
            oprot.WriteString(ActionsArgs[_iter7]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Origin != null && __isset.origin) {
        field.Name = "origin";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        Origin.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Image);
        oprot.WriteFieldEnd();
      }
      if (Video != null && __isset.video) {
        field.Name = "video";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Video);
        oprot.WriteFieldEnd();
      }
      if (Action != null && __isset.action) {
        field.Name = "action";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        Action.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TypeStr != null && __isset.typeStr) {
        field.Name = "typeStr";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TypeStr);
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Status);
        oprot.WriteFieldEnd();
      }
      if (ActionButtons != null && __isset.actionButtons) {
        field.Name = "actionButtons";
        field.Type = TType.List;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ActionButtons.Count));
          foreach (THActionButton _iter8 in ActionButtons)
          {
            _iter8.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.expiration) {
        field.Name = "expiration";
        field.Type = TType.I32;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Expiration);
        oprot.WriteFieldEnd();
      }
      if (Media != null && __isset.media) {
        field.Name = "media";
        field.Type = TType.Struct;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        Media.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("THNotification(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.createdAt) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreatedAt: ");
      __sb.Append(CreatedAt);
    }
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (__isset.isRead) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IsRead: ");
      __sb.Append(IsRead);
    }
    if (__isset.actionType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActionType: ");
      __sb.Append(ActionType);
    }
    if (ActionsArgs != null && __isset.actionsArgs) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActionsArgs: ");
      __sb.Append(ActionsArgs);
    }
    if (Text != null && __isset.text) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Text: ");
      __sb.Append(Text);
    }
    if (Title != null && __isset.title) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Title: ");
      __sb.Append(Title);
    }
    if (Origin != null && __isset.origin) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Origin: ");
      __sb.Append(Origin== null ? "<null>" : Origin.ToString());
    }
    if (Image != null && __isset.image) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Image: ");
      __sb.Append(Image);
    }
    if (Video != null && __isset.video) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Video: ");
      __sb.Append(Video);
    }
    if (Action != null && __isset.action) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Action: ");
      __sb.Append(Action== null ? "<null>" : Action.ToString());
    }
    if (TypeStr != null && __isset.typeStr) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TypeStr: ");
      __sb.Append(TypeStr);
    }
    if (Status != null && __isset.status) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Status: ");
      __sb.Append(Status);
    }
    if (ActionButtons != null && __isset.actionButtons) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActionButtons: ");
      __sb.Append(ActionButtons);
    }
    if (__isset.expiration) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Expiration: ");
      __sb.Append(Expiration);
    }
    if (Media != null && __isset.media) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Media: ");
      __sb.Append(Media== null ? "<null>" : Media.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
