#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THClickDetails : TBase
  {
    private THMatchType _matchType;
    private THDebugDetails _debugDetails;
    private long _dateInstalled;
    private THTrackType _trackType;
    private string _os;
    private string _osVersion;
    private string _deviceBrand;
    private string _deviceModel;
    private string _country;
    private string _city;
    private long _dateFirstInstalled;
    private string _deviceId;
    private string _userId;
    private long _clickCreatedAt;

    /// <summary>
    /// 
    /// <seealso cref="THMatchType"/>
    /// </summary>
    public THMatchType MatchType
    {
      get
      {
        return _matchType;
      }
      set
      {
        __isset.matchType = true;
        this._matchType = value;
      }
    }

    public THDebugDetails DebugDetails
    {
      get
      {
        return _debugDetails;
      }
      set
      {
        __isset.debugDetails = true;
        this._debugDetails = value;
      }
    }

    public long DateInstalled
    {
      get
      {
        return _dateInstalled;
      }
      set
      {
        __isset.dateInstalled = true;
        this._dateInstalled = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="THTrackType"/>
    /// </summary>
    public THTrackType TrackType
    {
      get
      {
        return _trackType;
      }
      set
      {
        __isset.trackType = true;
        this._trackType = value;
      }
    }

    public string Os
    {
      get
      {
        return _os;
      }
      set
      {
        __isset.os = true;
        this._os = value;
      }
    }

    public string OsVersion
    {
      get
      {
        return _osVersion;
      }
      set
      {
        __isset.osVersion = true;
        this._osVersion = value;
      }
    }

    public string DeviceBrand
    {
      get
      {
        return _deviceBrand;
      }
      set
      {
        __isset.deviceBrand = true;
        this._deviceBrand = value;
      }
    }

    public string DeviceModel
    {
      get
      {
        return _deviceModel;
      }
      set
      {
        __isset.deviceModel = true;
        this._deviceModel = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        this._city = value;
      }
    }

    public long DateFirstInstalled
    {
      get
      {
        return _dateFirstInstalled;
      }
      set
      {
        __isset.dateFirstInstalled = true;
        this._dateFirstInstalled = value;
      }
    }

    public string DeviceId
    {
      get
      {
        return _deviceId;
      }
      set
      {
        __isset.deviceId = true;
        this._deviceId = value;
      }
    }

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public long ClickCreatedAt
    {
      get
      {
        return _clickCreatedAt;
      }
      set
      {
        __isset.clickCreatedAt = true;
        this._clickCreatedAt = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool matchType;
      public bool debugDetails;
      public bool dateInstalled;
      public bool trackType;
      public bool os;
      public bool osVersion;
      public bool deviceBrand;
      public bool deviceModel;
      public bool country;
      public bool city;
      public bool dateFirstInstalled;
      public bool deviceId;
      public bool userId;
      public bool clickCreatedAt;
    }

    public THClickDetails() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                MatchType = (THMatchType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                DebugDetails = new THDebugDetails();
                DebugDetails.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                DateInstalled = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                TrackType = (THTrackType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Os = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                OsVersion = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                DeviceBrand = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                DeviceModel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                City = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                DateFirstInstalled = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                DeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I64) {
                ClickCreatedAt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THClickDetails");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.matchType) {
          field.Name = "matchType";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)MatchType);
          oprot.WriteFieldEnd();
        }
        if (DebugDetails != null && __isset.debugDetails) {
          field.Name = "debugDetails";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          DebugDetails.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.dateInstalled) {
          field.Name = "dateInstalled";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DateInstalled);
          oprot.WriteFieldEnd();
        }
        if (__isset.trackType) {
          field.Name = "trackType";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)TrackType);
          oprot.WriteFieldEnd();
        }
        if (Os != null && __isset.os) {
          field.Name = "os";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Os);
          oprot.WriteFieldEnd();
        }
        if (OsVersion != null && __isset.osVersion) {
          field.Name = "osVersion";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OsVersion);
          oprot.WriteFieldEnd();
        }
        if (DeviceBrand != null && __isset.deviceBrand) {
          field.Name = "deviceBrand";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceBrand);
          oprot.WriteFieldEnd();
        }
        if (DeviceModel != null && __isset.deviceModel) {
          field.Name = "deviceModel";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceModel);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (City != null && __isset.city) {
          field.Name = "city";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(City);
          oprot.WriteFieldEnd();
        }
        if (__isset.dateFirstInstalled) {
          field.Name = "dateFirstInstalled";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DateFirstInstalled);
          oprot.WriteFieldEnd();
        }
        if (DeviceId != null && __isset.deviceId) {
          field.Name = "deviceId";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceId);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.clickCreatedAt) {
          field.Name = "clickCreatedAt";
          field.Type = TType.I64;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ClickCreatedAt);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THClickDetails(");
      bool __first = true;
      if (__isset.matchType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MatchType: ");
        __sb.Append(MatchType);
      }
      if (DebugDetails != null && __isset.debugDetails) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DebugDetails: ");
        __sb.Append(DebugDetails== null ? "<null>" : DebugDetails.ToString());
      }
      if (__isset.dateInstalled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DateInstalled: ");
        __sb.Append(DateInstalled);
      }
      if (__isset.trackType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TrackType: ");
        __sb.Append(TrackType);
      }
      if (Os != null && __isset.os) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Os: ");
        __sb.Append(Os);
      }
      if (OsVersion != null && __isset.osVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OsVersion: ");
        __sb.Append(OsVersion);
      }
      if (DeviceBrand != null && __isset.deviceBrand) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceBrand: ");
        __sb.Append(DeviceBrand);
      }
      if (DeviceModel != null && __isset.deviceModel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceModel: ");
        __sb.Append(DeviceModel);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (City != null && __isset.city) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("City: ");
        __sb.Append(City);
      }
      if (__isset.dateFirstInstalled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DateFirstInstalled: ");
        __sb.Append(DateFirstInstalled);
      }
      if (DeviceId != null && __isset.deviceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceId: ");
        __sb.Append(DeviceId);
      }
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.clickCreatedAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClickCreatedAt: ");
        __sb.Append(ClickCreatedAt);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
