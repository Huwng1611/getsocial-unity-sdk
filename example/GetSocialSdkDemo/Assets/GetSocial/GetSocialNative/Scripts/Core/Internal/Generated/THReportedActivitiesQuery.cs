#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// evPortal-Start
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THReportedActivitiesQuery : TBase
  {
    private int _limit;
    private int _offset;
    private string _feedId;
    private THReportStatus _status;
    private string _orderBy;

    public int Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }

    public int Offset
    {
      get
      {
        return _offset;
      }
      set
      {
        __isset.offset = true;
        this._offset = value;
      }
    }

    public string FeedId
    {
      get
      {
        return _feedId;
      }
      set
      {
        __isset.feedId = true;
        this._feedId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="THReportStatus"/>
    /// </summary>
    public THReportStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public string OrderBy
    {
      get
      {
        return _orderBy;
      }
      set
      {
        __isset.@orderBy = true;
        this._orderBy = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool limit;
      public bool offset;
      public bool feedId;
      public bool status;
      public bool @orderBy;
    }

    public THReportedActivitiesQuery() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Limit = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Offset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                FeedId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Status = (THReportStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                OrderBy = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THReportedActivitiesQuery");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.limit) {
          field.Name = "limit";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Limit);
          oprot.WriteFieldEnd();
        }
        if (__isset.offset) {
          field.Name = "offset";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Offset);
          oprot.WriteFieldEnd();
        }
        if (FeedId != null && __isset.feedId) {
          field.Name = "feedId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FeedId);
          oprot.WriteFieldEnd();
        }
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Status);
          oprot.WriteFieldEnd();
        }
        if (OrderBy != null && __isset.@orderBy) {
          field.Name = "orderBy";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderBy);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THReportedActivitiesQuery(");
      bool __first = true;
      if (__isset.limit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Limit: ");
        __sb.Append(Limit);
      }
      if (__isset.offset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Offset: ");
        __sb.Append(Offset);
      }
      if (FeedId != null && __isset.feedId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeedId: ");
        __sb.Append(FeedId);
      }
      if (__isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status);
      }
      if (OrderBy != null && __isset.@orderBy) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OrderBy: ");
        __sb.Append(OrderBy);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
