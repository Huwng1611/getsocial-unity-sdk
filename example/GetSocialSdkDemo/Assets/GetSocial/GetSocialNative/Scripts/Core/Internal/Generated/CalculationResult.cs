#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CalculationResult : TBase
  {
    private string _totalExVat;
    private string _vat;
    private string _discount;
    private string _total;
    private string _vatRate;
    private PlanType _planType;
    private Dictionary<string, string> _dauData;
    private Dictionary<string, List<@Event>> _eventData;
    private string _description;

    public string TotalExVat
    {
      get
      {
        return _totalExVat;
      }
      set
      {
        __isset.totalExVat = true;
        this._totalExVat = value;
      }
    }

    /// <summary>
    /// total price excluding VAT, e.g "$9,99"
    /// </summary>
    public string Vat
    {
      get
      {
        return _vat;
      }
      set
      {
        __isset.vat = true;
        this._vat = value;
      }
    }

    /// <summary>
    /// VAT, e.g "$9.99"
    /// </summary>
    public string Discount
    {
      get
      {
        return _discount;
      }
      set
      {
        __isset.discount = true;
        this._discount = value;
      }
    }

    /// <summary>
    /// discount, if any. empty otherwise
    /// </summary>
    public string Total
    {
      get
      {
        return _total;
      }
      set
      {
        __isset.total = true;
        this._total = value;
      }
    }

    /// <summary>
    /// total price, including everything, e.g "$9,99"
    /// </summary>
    public string VatRate
    {
      get
      {
        return _vatRate;
      }
      set
      {
        __isset.vatRate = true;
        this._vatRate = value;
      }
    }

    /// <summary>
    /// VAT rate, e.g "21%"
    /// </summary>
    public PlanType PlanType
    {
      get
      {
        return _planType;
      }
      set
      {
        __isset.planType = true;
        this._planType = value;
      }
    }

    /// <summary>
    /// e.g "My App": "100000"
    /// </summary>
    public Dictionary<string, string> DauData
    {
      get
      {
        return _dauData;
      }
      set
      {
        __isset.dauData = true;
        this._dauData = value;
      }
    }

    /// <summary>
    /// map key is app name, e.g "My App"
    /// </summary>
    public Dictionary<string, List<@Event>> EventData
    {
      get
      {
        return _eventData;
      }
      set
      {
        __isset.eventData = true;
        this._eventData = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool totalExVat;
      public bool vat;
      public bool discount;
      public bool total;
      public bool vatRate;
      public bool planType;
      public bool dauData;
      public bool eventData;
      public bool description;
    }

    public CalculationResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TotalExVat = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Vat = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Discount = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Total = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                VatRate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                PlanType = (PlanType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Map) {
                {
                  DauData = new Dictionary<string, string>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    string _key2;
                    string _val3;
                    _key2 = iprot.ReadString();
                    _val3 = iprot.ReadString();
                    DauData[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Map) {
                {
                  EventData = new Dictionary<string, List<@Event>>();
                  TMap _map4 = iprot.ReadMapBegin();
                  for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                  {
                    string _key6;
                    List<@Event> _val7;
                    _key6 = iprot.ReadString();
                    {
                      _val7 = new List<@Event>();
                      TList _list8 = iprot.ReadListBegin();
                      for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                      {
                        @Event _elem10;
                        _elem10 = new @Event();
                        _elem10.Read(iprot);
                        _val7.Add(_elem10);
                      }
                      iprot.ReadListEnd();
                    }
                    EventData[_key6] = _val7;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CalculationResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TotalExVat != null && __isset.totalExVat) {
          field.Name = "totalExVat";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TotalExVat);
          oprot.WriteFieldEnd();
        }
        if (Vat != null && __isset.vat) {
          field.Name = "vat";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Vat);
          oprot.WriteFieldEnd();
        }
        if (Discount != null && __isset.discount) {
          field.Name = "discount";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Discount);
          oprot.WriteFieldEnd();
        }
        if (Total != null && __isset.total) {
          field.Name = "total";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Total);
          oprot.WriteFieldEnd();
        }
        if (VatRate != null && __isset.vatRate) {
          field.Name = "vatRate";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VatRate);
          oprot.WriteFieldEnd();
        }
        if (__isset.planType) {
          field.Name = "planType";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)PlanType);
          oprot.WriteFieldEnd();
        }
        if (DauData != null && __isset.dauData) {
          field.Name = "dauData";
          field.Type = TType.Map;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, DauData.Count));
            foreach (string _iter11 in DauData.Keys)
            {
              oprot.WriteString(_iter11);
              oprot.WriteString(DauData[_iter11]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (EventData != null && __isset.eventData) {
          field.Name = "eventData";
          field.Type = TType.Map;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.List, EventData.Count));
            foreach (string _iter12 in EventData.Keys)
            {
              oprot.WriteString(_iter12);
              {
                oprot.WriteListBegin(new TList(TType.Struct, EventData[_iter12].Count));
                foreach (@Event _iter13 in EventData[_iter12])
                {
                  _iter13.Write(oprot);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CalculationResult(");
      bool __first = true;
      if (TotalExVat != null && __isset.totalExVat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TotalExVat: ");
        __sb.Append(TotalExVat);
      }
      if (Vat != null && __isset.vat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vat: ");
        __sb.Append(Vat);
      }
      if (Discount != null && __isset.discount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Discount: ");
        __sb.Append(Discount);
      }
      if (Total != null && __isset.total) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Total: ");
        __sb.Append(Total);
      }
      if (VatRate != null && __isset.vatRate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VatRate: ");
        __sb.Append(VatRate);
      }
      if (__isset.planType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PlanType: ");
        __sb.Append(PlanType);
      }
      if (DauData != null && __isset.dauData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DauData: ");
        __sb.Append(DauData.ToDebugString());
      }
      if (EventData != null && __isset.eventData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EventData: ");
        __sb.Append(EventData.ToDebugString());
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
