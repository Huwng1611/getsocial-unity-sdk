#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SendNotificationRequest : TBase
{
  private string _sessionId;
  private List<string> _userIds;
  private string _text;
  private string _title;
  private string _templateName;
  private Dictionary<string, string> _templateData;
  private THAction _action;
  private List<THActionButton> _actionButtons;
  private THNotificationTemplateMedia _media;
  private THBadge _badge;

  public string SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  public List<string> UserIds
  {
    get
    {
      return _userIds;
    }
    set
    {
      __isset.userIds = true;
      this._userIds = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  public string TemplateName
  {
    get
    {
      return _templateName;
    }
    set
    {
      __isset.templateName = true;
      this._templateName = value;
    }
  }

  public Dictionary<string, string> TemplateData
  {
    get
    {
      return _templateData;
    }
    set
    {
      __isset.templateData = true;
      this._templateData = value;
    }
  }

  public THAction Action
  {
    get
    {
      return _action;
    }
    set
    {
      __isset.action = true;
      this._action = value;
    }
  }

  public List<THActionButton> ActionButtons
  {
    get
    {
      return _actionButtons;
    }
    set
    {
      __isset.actionButtons = true;
      this._actionButtons = value;
    }
  }

  public THNotificationTemplateMedia Media
  {
    get
    {
      return _media;
    }
    set
    {
      __isset.media = true;
      this._media = value;
    }
  }

  public THBadge Badge
  {
    get
    {
      return _badge;
    }
    set
    {
      __isset.badge = true;
      this._badge = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sessionId;
    public bool userIds;
    public bool text;
    public bool title;
    public bool templateName;
    public bool templateData;
    public bool action;
    public bool actionButtons;
    public bool media;
    public bool badge;
  }

  public SendNotificationRequest() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SessionId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                UserIds = new List<string>();
                TList _list77 = iprot.ReadListBegin();
                for( int _i78 = 0; _i78 < _list77.Count; ++_i78)
                {
                  string _elem79;
                  _elem79 = iprot.ReadString();
                  UserIds.Add(_elem79);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              TemplateName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                TemplateData = new Dictionary<string, string>();
                TMap _map80 = iprot.ReadMapBegin();
                for( int _i81 = 0; _i81 < _map80.Count; ++_i81)
                {
                  string _key82;
                  string _val83;
                  _key82 = iprot.ReadString();
                  _val83 = iprot.ReadString();
                  TemplateData[_key82] = _val83;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              Action = new THAction();
              Action.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                ActionButtons = new List<THActionButton>();
                TList _list84 = iprot.ReadListBegin();
                for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                {
                  THActionButton _elem86;
                  _elem86 = new THActionButton();
                  _elem86.Read(iprot);
                  ActionButtons.Add(_elem86);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              Media = new THNotificationTemplateMedia();
              Media.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Badge = new THBadge();
              Badge.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SendNotificationRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SessionId != null && __isset.sessionId) {
        field.Name = "sessionId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionId);
        oprot.WriteFieldEnd();
      }
      if (UserIds != null && __isset.userIds) {
        field.Name = "userIds";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, UserIds.Count));
          foreach (string _iter87 in UserIds)
          {
            oprot.WriteString(_iter87);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (TemplateName != null && __isset.templateName) {
        field.Name = "templateName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TemplateName);
        oprot.WriteFieldEnd();
      }
      if (TemplateData != null && __isset.templateData) {
        field.Name = "templateData";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, TemplateData.Count));
          foreach (string _iter88 in TemplateData.Keys)
          {
            oprot.WriteString(_iter88);
            oprot.WriteString(TemplateData[_iter88]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Action != null && __isset.action) {
        field.Name = "action";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        Action.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ActionButtons != null && __isset.actionButtons) {
        field.Name = "actionButtons";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ActionButtons.Count));
          foreach (THActionButton _iter89 in ActionButtons)
          {
            _iter89.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Media != null && __isset.media) {
        field.Name = "media";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        Media.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Badge != null && __isset.badge) {
        field.Name = "badge";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Badge.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SendNotificationRequest(");
    bool __first = true;
    if (SessionId != null && __isset.sessionId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionId: ");
      __sb.Append(SessionId);
    }
    if (UserIds != null && __isset.userIds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserIds: ");
      __sb.Append(UserIds);
    }
    if (Text != null && __isset.text) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Text: ");
      __sb.Append(Text);
    }
    if (Title != null && __isset.title) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Title: ");
      __sb.Append(Title);
    }
    if (TemplateName != null && __isset.templateName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TemplateName: ");
      __sb.Append(TemplateName);
    }
    if (TemplateData != null && __isset.templateData) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TemplateData: ");
      __sb.Append(TemplateData);
    }
    if (Action != null && __isset.action) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Action: ");
      __sb.Append(Action== null ? "<null>" : Action.ToString());
    }
    if (ActionButtons != null && __isset.actionButtons) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActionButtons: ");
      __sb.Append(ActionButtons);
    }
    if (Media != null && __isset.media) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Media: ");
      __sb.Append(Media== null ? "<null>" : Media.ToString());
    }
    if (Badge != null && __isset.badge) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Badge: ");
      __sb.Append(Badge== null ? "<null>" : Badge.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
