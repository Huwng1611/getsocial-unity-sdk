#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THCompany : TBase
  {
    private string _id;
    private string _name;
    private string _website;
    private string _billingEmail;
    private string _vatNumber;
    private string _address;
    private string _city;
    private string _zipCode;
    private string _country;
    private string _referrer;
    private THCompanyProperties _properties;
    private string _address2;
    private string _province;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Website
    {
      get
      {
        return _website;
      }
      set
      {
        __isset.website = true;
        this._website = value;
      }
    }

    public string BillingEmail
    {
      get
      {
        return _billingEmail;
      }
      set
      {
        __isset.billingEmail = true;
        this._billingEmail = value;
      }
    }

    public string VatNumber
    {
      get
      {
        return _vatNumber;
      }
      set
      {
        __isset.vatNumber = true;
        this._vatNumber = value;
      }
    }

    public string Address
    {
      get
      {
        return _address;
      }
      set
      {
        __isset.address = true;
        this._address = value;
      }
    }

    public string City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        this._city = value;
      }
    }

    public string ZipCode
    {
      get
      {
        return _zipCode;
      }
      set
      {
        __isset.zipCode = true;
        this._zipCode = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Referrer
    {
      get
      {
        return _referrer;
      }
      set
      {
        __isset.referrer = true;
        this._referrer = value;
      }
    }

    public THCompanyProperties Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public string Address2
    {
      get
      {
        return _address2;
      }
      set
      {
        __isset.address2 = true;
        this._address2 = value;
      }
    }

    public string Province
    {
      get
      {
        return _province;
      }
      set
      {
        __isset.province = true;
        this._province = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool website;
      public bool billingEmail;
      public bool vatNumber;
      public bool address;
      public bool city;
      public bool zipCode;
      public bool country;
      public bool referrer;
      public bool properties;
      public bool address2;
      public bool province;
    }

    public THCompany() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Website = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                BillingEmail = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                VatNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Address = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                City = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                ZipCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Referrer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                Properties = new THCompanyProperties();
                Properties.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                Address2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                Province = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THCompany");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Website != null && __isset.website) {
          field.Name = "website";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Website);
          oprot.WriteFieldEnd();
        }
        if (BillingEmail != null && __isset.billingEmail) {
          field.Name = "billingEmail";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BillingEmail);
          oprot.WriteFieldEnd();
        }
        if (VatNumber != null && __isset.vatNumber) {
          field.Name = "vatNumber";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VatNumber);
          oprot.WriteFieldEnd();
        }
        if (Address != null && __isset.address) {
          field.Name = "address";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Address);
          oprot.WriteFieldEnd();
        }
        if (City != null && __isset.city) {
          field.Name = "city";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(City);
          oprot.WriteFieldEnd();
        }
        if (ZipCode != null && __isset.zipCode) {
          field.Name = "zipCode";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ZipCode);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Referrer != null && __isset.referrer) {
          field.Name = "referrer";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Referrer);
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.properties) {
          field.Name = "properties";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          Properties.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Address2 != null && __isset.address2) {
          field.Name = "address2";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Address2);
          oprot.WriteFieldEnd();
        }
        if (Province != null && __isset.province) {
          field.Name = "province";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Province);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THCompany(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Website != null && __isset.website) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Website: ");
        __sb.Append(Website);
      }
      if (BillingEmail != null && __isset.billingEmail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BillingEmail: ");
        __sb.Append(BillingEmail);
      }
      if (VatNumber != null && __isset.vatNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VatNumber: ");
        __sb.Append(VatNumber);
      }
      if (Address != null && __isset.address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Address: ");
        __sb.Append(Address);
      }
      if (City != null && __isset.city) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("City: ");
        __sb.Append(City);
      }
      if (ZipCode != null && __isset.zipCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ZipCode: ");
        __sb.Append(ZipCode);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (Referrer != null && __isset.referrer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Referrer: ");
        __sb.Append(Referrer);
      }
      if (Properties != null && __isset.properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties);
      }
      if (Address2 != null && __isset.address2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Address2: ");
        __sb.Append(Address2);
      }
      if (Province != null && __isset.province) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Province: ");
        __sb.Append(Province);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
