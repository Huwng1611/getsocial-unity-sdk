#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CreateAnnouncementRequest : TBase
{
  private string _sessionId;
  private Dictionary<string, AFContent> _content;
  private long _startDate;
  private long _endDate;
  private Dictionary<string, string> _properties;
  private SGEntity _target;

  public string SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  public Dictionary<string, AFContent> Content
  {
    get
    {
      return _content;
    }
    set
    {
      __isset.content = true;
      this._content = value;
    }
  }

  public long StartDate
  {
    get
    {
      return _startDate;
    }
    set
    {
      __isset.startDate = true;
      this._startDate = value;
    }
  }

  public long EndDate
  {
    get
    {
      return _endDate;
    }
    set
    {
      __isset.endDate = true;
      this._endDate = value;
    }
  }

  public Dictionary<string, string> Properties
  {
    get
    {
      return _properties;
    }
    set
    {
      __isset.properties = true;
      this._properties = value;
    }
  }

  public SGEntity Target
  {
    get
    {
      return _target;
    }
    set
    {
      __isset.target = true;
      this._target = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sessionId;
    public bool content;
    public bool startDate;
    public bool endDate;
    public bool properties;
    public bool target;
  }

  public CreateAnnouncementRequest() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SessionId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Content = new Dictionary<string, AFContent>();
                TMap _map120 = iprot.ReadMapBegin();
                for( int _i121 = 0; _i121 < _map120.Count; ++_i121)
                {
                  string _key122;
                  AFContent _val123;
                  _key122 = iprot.ReadString();
                  _val123 = new AFContent();
                  _val123.Read(iprot);
                  Content[_key122] = _val123;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                Properties = new Dictionary<string, string>();
                TMap _map124 = iprot.ReadMapBegin();
                for( int _i125 = 0; _i125 < _map124.Count; ++_i125)
                {
                  string _key126;
                  string _val127;
                  _key126 = iprot.ReadString();
                  _val127 = iprot.ReadString();
                  Properties[_key126] = _val127;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Target = new SGEntity();
              Target.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CreateAnnouncementRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SessionId != null && __isset.sessionId) {
        field.Name = "sessionId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionId);
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Content.Count));
          foreach (string _iter128 in Content.Keys)
          {
            oprot.WriteString(_iter128);
            Content[_iter128].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.startDate) {
        field.Name = "startDate";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.endDate) {
        field.Name = "endDate";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndDate);
        oprot.WriteFieldEnd();
      }
      if (Properties != null && __isset.properties) {
        field.Name = "properties";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
          foreach (string _iter129 in Properties.Keys)
          {
            oprot.WriteString(_iter129);
            oprot.WriteString(Properties[_iter129]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Target != null && __isset.target) {
        field.Name = "target";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Target.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CreateAnnouncementRequest(");
    bool __first = true;
    if (SessionId != null && __isset.sessionId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionId: ");
      __sb.Append(SessionId);
    }
    if (Content != null && __isset.content) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Content: ");
      __sb.Append(Content);
    }
    if (__isset.startDate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartDate: ");
      __sb.Append(StartDate);
    }
    if (__isset.endDate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EndDate: ");
      __sb.Append(EndDate);
    }
    if (Properties != null && __isset.properties) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Properties: ");
      __sb.Append(Properties);
    }
    if (Target != null && __isset.target) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Target: ");
      __sb.Append(Target== null ? "<null>" : Target.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
