#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SFTriggerConfig : TBase
  {
    private long _audienceId;
    private string _event;
    private long _count;
    private string _cron;
    private List<SFFilter> _filters;

    /// <summary>
    /// Smart Audience ID, for Audience triggers only.
    /// </summary>
    public long AudienceId
    {
      get
      {
        return _audienceId;
      }
      set
      {
        __isset.audienceId = true;
        this._audienceId = value;
      }
    }

    /// <summary>
    /// Analytics event name. For single and periodic triggers.
    /// </summary>
    public string Event
    {
      get
      {
        return _event;
      }
      set
      {
        __isset.@event = true;
        this._event = value;
      }
    }

    /// <summary>
    /// For periodic triggers, Actions will execute every Count events.
    /// </summary>
    public long Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    /// <summary>
    /// Cron expression for Audience schedules.
    /// </summary>
    public string Cron
    {
      get
      {
        return _cron;
      }
      set
      {
        __isset.cron = true;
        this._cron = value;
      }
    }

    /// <summary>
    /// Optional filters for event based triggers.
    /// </summary>
    public List<SFFilter> Filters
    {
      get
      {
        return _filters;
      }
      set
      {
        __isset.filters = true;
        this._filters = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool audienceId;
      public bool @event;
      public bool count;
      public bool cron;
      public bool filters;
    }

    public SFTriggerConfig() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                AudienceId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Event = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Count = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Cron = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Filters = new List<SFFilter>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    SFFilter _elem2;
                    _elem2 = new SFFilter();
                    _elem2.Read(iprot);
                    Filters.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SFTriggerConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.audienceId) {
          field.Name = "audienceId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AudienceId);
          oprot.WriteFieldEnd();
        }
        if (Event != null && __isset.@event) {
          field.Name = "event";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Event);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Count);
          oprot.WriteFieldEnd();
        }
        if (Cron != null && __isset.cron) {
          field.Name = "cron";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cron);
          oprot.WriteFieldEnd();
        }
        if (Filters != null && __isset.filters) {
          field.Name = "filters";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Filters.Count));
            foreach (SFFilter _iter3 in Filters)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SFTriggerConfig(");
      bool __first = true;
      if (__isset.audienceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AudienceId: ");
        __sb.Append(AudienceId);
      }
      if (Event != null && __isset.@event) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Event: ");
        __sb.Append(Event);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      if (Cron != null && __isset.cron) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cron: ");
        __sb.Append(Cron);
      }
      if (Filters != null && __isset.filters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Filters: ");
        __sb.Append(Filters.ToDebugString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
