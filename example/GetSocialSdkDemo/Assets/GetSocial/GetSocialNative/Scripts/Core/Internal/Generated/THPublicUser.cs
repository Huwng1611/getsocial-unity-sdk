#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class THPublicUser : TBase
{
  private string _id;
  private string _displayName;
  private string _avatarUrl;
  private List<THIdentity> _identities;
  private Dictionary<string, string> _publicProperties;
  private Dictionary<string, string> _internalPublicProperties;
  private string _installDate;
  private string _installProvider;
  private THDeviceOs _installPlatform;
  private bool _reinstall;
  private bool _installSuspicious;
  private string _installPlatformStr;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  public string AvatarUrl
  {
    get
    {
      return _avatarUrl;
    }
    set
    {
      __isset.avatarUrl = true;
      this._avatarUrl = value;
    }
  }

  public List<THIdentity> Identities
  {
    get
    {
      return _identities;
    }
    set
    {
      __isset.identities = true;
      this._identities = value;
    }
  }

  public Dictionary<string, string> PublicProperties
  {
    get
    {
      return _publicProperties;
    }
    set
    {
      __isset.publicProperties = true;
      this._publicProperties = value;
    }
  }

  public Dictionary<string, string> InternalPublicProperties
  {
    get
    {
      return _internalPublicProperties;
    }
    set
    {
      __isset.internalPublicProperties = true;
      this._internalPublicProperties = value;
    }
  }

  public string InstallDate
  {
    get
    {
      return _installDate;
    }
    set
    {
      __isset.installDate = true;
      this._installDate = value;
    }
  }

  /// <summary>
  /// as Unix timestamp
  /// </summary>
  public string InstallProvider
  {
    get
    {
      return _installProvider;
    }
    set
    {
      __isset.installProvider = true;
      this._installProvider = value;
    }
  }

  /// <summary>
  /// The provider if installed via SI
  /// 
  /// <seealso cref=".THDeviceOs"/>
  /// </summary>
  public THDeviceOs InstallPlatform
  {
    get
    {
      return _installPlatform;
    }
    set
    {
      __isset.installPlatform = true;
      this._installPlatform = value;
    }
  }

  /// <summary>
  /// deprecated The platform the user installed the app from
  /// </summary>
  public bool Reinstall
  {
    get
    {
      return _reinstall;
    }
    set
    {
      __isset.reinstall = true;
      this._reinstall = value;
    }
  }

  /// <summary>
  /// If the user reinstalled the app
  /// </summary>
  public bool InstallSuspicious
  {
    get
    {
      return _installSuspicious;
    }
    set
    {
      __isset.installSuspicious = true;
      this._installSuspicious = value;
    }
  }

  /// <summary>
  /// If the install/reinstall was flagged as suspicious
  /// </summary>
  public string InstallPlatformStr
  {
    get
    {
      return _installPlatformStr;
    }
    set
    {
      __isset.installPlatformStr = true;
      this._installPlatformStr = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool displayName;
    public bool avatarUrl;
    public bool identities;
    public bool publicProperties;
    public bool internalPublicProperties;
    public bool installDate;
    public bool installProvider;
    public bool installPlatform;
    public bool reinstall;
    public bool installSuspicious;
    public bool installPlatformStr;
  }

  public THPublicUser() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              DisplayName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              AvatarUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Identities = new List<THIdentity>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  THIdentity _elem26;
                  _elem26 = new THIdentity();
                  _elem26.Read(iprot);
                  Identities.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                PublicProperties = new Dictionary<string, string>();
                TMap _map27 = iprot.ReadMapBegin();
                for( int _i28 = 0; _i28 < _map27.Count; ++_i28)
                {
                  string _key29;
                  string _val30;
                  _key29 = iprot.ReadString();
                  _val30 = iprot.ReadString();
                  PublicProperties[_key29] = _val30;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                InternalPublicProperties = new Dictionary<string, string>();
                TMap _map31 = iprot.ReadMapBegin();
                for( int _i32 = 0; _i32 < _map31.Count; ++_i32)
                {
                  string _key33;
                  string _val34;
                  _key33 = iprot.ReadString();
                  _val34 = iprot.ReadString();
                  InternalPublicProperties[_key33] = _val34;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              InstallDate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              InstallProvider = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              InstallPlatform = (THDeviceOs)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              Reinstall = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              InstallSuspicious = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              InstallPlatformStr = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("THPublicUser");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (DisplayName != null && __isset.displayName) {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayName);
        oprot.WriteFieldEnd();
      }
      if (AvatarUrl != null && __isset.avatarUrl) {
        field.Name = "avatarUrl";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AvatarUrl);
        oprot.WriteFieldEnd();
      }
      if (Identities != null && __isset.identities) {
        field.Name = "identities";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Identities.Count));
          foreach (THIdentity _iter35 in Identities)
          {
            _iter35.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PublicProperties != null && __isset.publicProperties) {
        field.Name = "publicProperties";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, PublicProperties.Count));
          foreach (string _iter36 in PublicProperties.Keys)
          {
            oprot.WriteString(_iter36);
            oprot.WriteString(PublicProperties[_iter36]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (InternalPublicProperties != null && __isset.internalPublicProperties) {
        field.Name = "internalPublicProperties";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, InternalPublicProperties.Count));
          foreach (string _iter37 in InternalPublicProperties.Keys)
          {
            oprot.WriteString(_iter37);
            oprot.WriteString(InternalPublicProperties[_iter37]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (InstallDate != null && __isset.installDate) {
        field.Name = "installDate";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InstallDate);
        oprot.WriteFieldEnd();
      }
      if (InstallProvider != null && __isset.installProvider) {
        field.Name = "installProvider";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InstallProvider);
        oprot.WriteFieldEnd();
      }
      if (__isset.installPlatform) {
        field.Name = "installPlatform";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)InstallPlatform);
        oprot.WriteFieldEnd();
      }
      if (__isset.reinstall) {
        field.Name = "reinstall";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Reinstall);
        oprot.WriteFieldEnd();
      }
      if (__isset.installSuspicious) {
        field.Name = "installSuspicious";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(InstallSuspicious);
        oprot.WriteFieldEnd();
      }
      if (InstallPlatformStr != null && __isset.installPlatformStr) {
        field.Name = "installPlatformStr";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InstallPlatformStr);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("THPublicUser(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (DisplayName != null && __isset.displayName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DisplayName: ");
      __sb.Append(DisplayName);
    }
    if (AvatarUrl != null && __isset.avatarUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AvatarUrl: ");
      __sb.Append(AvatarUrl);
    }
    if (Identities != null && __isset.identities) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Identities: ");
      __sb.Append(Identities);
    }
    if (PublicProperties != null && __isset.publicProperties) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PublicProperties: ");
      __sb.Append(PublicProperties);
    }
    if (InternalPublicProperties != null && __isset.internalPublicProperties) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InternalPublicProperties: ");
      __sb.Append(InternalPublicProperties);
    }
    if (InstallDate != null && __isset.installDate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InstallDate: ");
      __sb.Append(InstallDate);
    }
    if (InstallProvider != null && __isset.installProvider) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InstallProvider: ");
      __sb.Append(InstallProvider);
    }
    if (__isset.installPlatform) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InstallPlatform: ");
      __sb.Append(InstallPlatform);
    }
    if (__isset.reinstall) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Reinstall: ");
      __sb.Append(Reinstall);
    }
    if (__isset.installSuspicious) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InstallSuspicious: ");
      __sb.Append(InstallSuspicious);
    }
    if (InstallPlatformStr != null && __isset.installPlatformStr) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InstallPlatformStr: ");
      __sb.Append(InstallPlatformStr);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
