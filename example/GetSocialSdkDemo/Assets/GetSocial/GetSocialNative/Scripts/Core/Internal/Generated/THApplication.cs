#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// evPortal-Start
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THApplication : TBase
  {
    private string _id;
    private string _appId;
    private string _companyId;
    private string _name;
    private string _iconUrl;
    private THAppPublicProperties _publicProperties;
    private THAppPrivateProperties _privateProperties;
    private string _analyticsToken;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// Internal GUID, only shown to ROLE_ADMIN sessions.
    /// </summary>
    public string AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        this._appId = value;
      }
    }

    /// <summary>
    /// Public app ID shown to developers and used by the SDK. Filled by Hades during RPC.
    /// </summary>
    public string CompanyId
    {
      get
      {
        return _companyId;
      }
      set
      {
        __isset.companyId = true;
        this._companyId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string IconUrl
    {
      get
      {
        return _iconUrl;
      }
      set
      {
        __isset.iconUrl = true;
        this._iconUrl = value;
      }
    }

    public THAppPublicProperties PublicProperties
    {
      get
      {
        return _publicProperties;
      }
      set
      {
        __isset.publicProperties = true;
        this._publicProperties = value;
      }
    }

    public THAppPrivateProperties PrivateProperties
    {
      get
      {
        return _privateProperties;
      }
      set
      {
        __isset.privateProperties = true;
        this._privateProperties = value;
      }
    }

    public string AnalyticsToken
    {
      get
      {
        return _analyticsToken;
      }
      set
      {
        __isset.analyticsToken = true;
        this._analyticsToken = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool appId;
      public bool companyId;
      public bool name;
      public bool iconUrl;
      public bool publicProperties;
      public bool privateProperties;
      public bool analyticsToken;
    }

    public THApplication() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AppId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CompanyId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                IconUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                PublicProperties = new THAppPublicProperties();
                PublicProperties.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                PrivateProperties = new THAppPrivateProperties();
                PrivateProperties.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                AnalyticsToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THApplication");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (AppId != null && __isset.appId) {
          field.Name = "appId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppId);
          oprot.WriteFieldEnd();
        }
        if (CompanyId != null && __isset.companyId) {
          field.Name = "companyId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CompanyId);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (IconUrl != null && __isset.iconUrl) {
          field.Name = "iconUrl";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IconUrl);
          oprot.WriteFieldEnd();
        }
        if (PublicProperties != null && __isset.publicProperties) {
          field.Name = "publicProperties";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          PublicProperties.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PrivateProperties != null && __isset.privateProperties) {
          field.Name = "privateProperties";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          PrivateProperties.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (AnalyticsToken != null && __isset.analyticsToken) {
          field.Name = "analyticsToken";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AnalyticsToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THApplication(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (AppId != null && __isset.appId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppId: ");
        __sb.Append(AppId);
      }
      if (CompanyId != null && __isset.companyId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CompanyId: ");
        __sb.Append(CompanyId);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (IconUrl != null && __isset.iconUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IconUrl: ");
        __sb.Append(IconUrl);
      }
      if (PublicProperties != null && __isset.publicProperties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicProperties: ");
        __sb.Append(PublicProperties);
      }
      if (PrivateProperties != null && __isset.privateProperties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PrivateProperties: ");
        __sb.Append(PrivateProperties);
      }
      if (AnalyticsToken != null && __isset.analyticsToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnalyticsToken: ");
        __sb.Append(AnalyticsToken);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
