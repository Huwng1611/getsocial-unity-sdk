#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// Calculated at runtime by Hades
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THAppPublicProperties : TBase
  {
    private Dictionary<string, string> _inviteText;
    private Dictionary<string, string> _inviteSubject;
    private string _inviteImage;
    private string _inviteGif;
    private string _inviteVideo;

    public Dictionary<string, string> InviteText
    {
      get
      {
        return _inviteText;
      }
      set
      {
        __isset.inviteText = true;
        this._inviteText = value;
      }
    }

    public Dictionary<string, string> InviteSubject
    {
      get
      {
        return _inviteSubject;
      }
      set
      {
        __isset.inviteSubject = true;
        this._inviteSubject = value;
      }
    }

    public string InviteImage
    {
      get
      {
        return _inviteImage;
      }
      set
      {
        __isset.inviteImage = true;
        this._inviteImage = value;
      }
    }

    public string InviteGif
    {
      get
      {
        return _inviteGif;
      }
      set
      {
        __isset.inviteGif = true;
        this._inviteGif = value;
      }
    }

    public string InviteVideo
    {
      get
      {
        return _inviteVideo;
      }
      set
      {
        __isset.inviteVideo = true;
        this._inviteVideo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inviteText;
      public bool inviteSubject;
      public bool inviteImage;
      public bool inviteGif;
      public bool inviteVideo;
    }

    public THAppPublicProperties() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  InviteText = new Dictionary<string, string>();
                  TMap _map10 = iprot.ReadMapBegin();
                  for( int _i11 = 0; _i11 < _map10.Count; ++_i11)
                  {
                    string _key12;
                    string _val13;
                    _key12 = iprot.ReadString();
                    _val13 = iprot.ReadString();
                    InviteText[_key12] = _val13;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  InviteSubject = new Dictionary<string, string>();
                  TMap _map14 = iprot.ReadMapBegin();
                  for( int _i15 = 0; _i15 < _map14.Count; ++_i15)
                  {
                    string _key16;
                    string _val17;
                    _key16 = iprot.ReadString();
                    _val17 = iprot.ReadString();
                    InviteSubject[_key16] = _val17;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                InviteImage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                InviteGif = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                InviteVideo = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THAppPublicProperties");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InviteText != null && __isset.inviteText) {
          field.Name = "inviteText";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, InviteText.Count));
            foreach (string _iter18 in InviteText.Keys)
            {
              oprot.WriteString(_iter18);
              oprot.WriteString(InviteText[_iter18]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InviteSubject != null && __isset.inviteSubject) {
          field.Name = "inviteSubject";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, InviteSubject.Count));
            foreach (string _iter19 in InviteSubject.Keys)
            {
              oprot.WriteString(_iter19);
              oprot.WriteString(InviteSubject[_iter19]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InviteImage != null && __isset.inviteImage) {
          field.Name = "inviteImage";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InviteImage);
          oprot.WriteFieldEnd();
        }
        if (InviteGif != null && __isset.inviteGif) {
          field.Name = "inviteGif";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InviteGif);
          oprot.WriteFieldEnd();
        }
        if (InviteVideo != null && __isset.inviteVideo) {
          field.Name = "inviteVideo";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InviteVideo);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THAppPublicProperties(");
      bool __first = true;
      if (InviteText != null && __isset.inviteText) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteText: ");
        __sb.Append(InviteText.ToDebugString());
      }
      if (InviteSubject != null && __isset.inviteSubject) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteSubject: ");
        __sb.Append(InviteSubject.ToDebugString());
      }
      if (InviteImage != null && __isset.inviteImage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteImage: ");
        __sb.Append(InviteImage);
      }
      if (InviteGif != null && __isset.inviteGif) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteGif: ");
        __sb.Append(InviteGif);
      }
      if (InviteVideo != null && __isset.inviteVideo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteVideo: ");
        __sb.Append(InviteVideo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
