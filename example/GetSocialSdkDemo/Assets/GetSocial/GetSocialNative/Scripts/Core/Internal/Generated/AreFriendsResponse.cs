#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AreFriendsResponse : TBase
{
  private Dictionary<string, bool> _result;

  public Dictionary<string, bool> Result
  {
    get
    {
      return _result;
    }
    set
    {
      __isset.result = true;
      this._result = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool result;
  }

  public AreFriendsResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Result = new Dictionary<string, bool>();
                TMap _map68 = iprot.ReadMapBegin();
                for( int _i69 = 0; _i69 < _map68.Count; ++_i69)
                {
                  string _key70;
                  bool _val71;
                  _key70 = iprot.ReadString();
                  _val71 = iprot.ReadBool();
                  Result[_key70] = _val71;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AreFriendsResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Result != null && __isset.result) {
        field.Name = "result";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Bool, Result.Count));
          foreach (string _iter72 in Result.Keys)
          {
            oprot.WriteString(_iter72);
            oprot.WriteBool(Result[_iter72]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AreFriendsResponse(");
    bool __first = true;
    if (Result != null && __isset.result) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Result: ");
      __sb.Append(Result);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
