#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// #sdk6 #sdk7
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THInviteProperties : TBase
  {
    private string _action;
    private List<THAvailableField> _availableFields;
    private string _contentType;
    private string _className;
    private string _data;
    private string _packageName;
    private string _uti;
    private string _urlScheme;
    private string _imageExtension;
    private Dictionary<string, string> _annotations;

    public string Action
    {
      get
      {
        return _action;
      }
      set
      {
        __isset.action = true;
        this._action = value;
      }
    }

    public List<THAvailableField> AvailableFields
    {
      get
      {
        return _availableFields;
      }
      set
      {
        __isset.availableFields = true;
        this._availableFields = value;
      }
    }

    public string ContentType
    {
      get
      {
        return _contentType;
      }
      set
      {
        __isset.contentType = true;
        this._contentType = value;
      }
    }

    public string ClassName
    {
      get
      {
        return _className;
      }
      set
      {
        __isset.className = true;
        this._className = value;
      }
    }

    public string Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public string PackageName
    {
      get
      {
        return _packageName;
      }
      set
      {
        __isset.packageName = true;
        this._packageName = value;
      }
    }

    public string Uti
    {
      get
      {
        return _uti;
      }
      set
      {
        __isset.uti = true;
        this._uti = value;
      }
    }

    public string UrlScheme
    {
      get
      {
        return _urlScheme;
      }
      set
      {
        __isset.urlScheme = true;
        this._urlScheme = value;
      }
    }

    public string ImageExtension
    {
      get
      {
        return _imageExtension;
      }
      set
      {
        __isset.imageExtension = true;
        this._imageExtension = value;
      }
    }

    public Dictionary<string, string> Annotations
    {
      get
      {
        return _annotations;
      }
      set
      {
        __isset.annotations = true;
        this._annotations = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool action;
      public bool availableFields;
      public bool contentType;
      public bool className;
      public bool data;
      public bool packageName;
      public bool uti;
      public bool urlScheme;
      public bool imageExtension;
      public bool annotations;
    }

    public THInviteProperties() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Action = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  AvailableFields = new List<THAvailableField>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    THAvailableField _elem26;
                    _elem26 = (THAvailableField)iprot.ReadI32();
                    AvailableFields.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ContentType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ClassName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Data = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                PackageName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Uti = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                UrlScheme = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                ImageExtension = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Map) {
                {
                  Annotations = new Dictionary<string, string>();
                  TMap _map27 = iprot.ReadMapBegin();
                  for( int _i28 = 0; _i28 < _map27.Count; ++_i28)
                  {
                    string _key29;
                    string _val30;
                    _key29 = iprot.ReadString();
                    _val30 = iprot.ReadString();
                    Annotations[_key29] = _val30;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THInviteProperties");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Action != null && __isset.action) {
          field.Name = "action";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Action);
          oprot.WriteFieldEnd();
        }
        if (AvailableFields != null && __isset.availableFields) {
          field.Name = "availableFields";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, AvailableFields.Count));
            foreach (THAvailableField _iter31 in AvailableFields)
            {
              oprot.WriteI32((int)_iter31);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ContentType != null && __isset.contentType) {
          field.Name = "contentType";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ContentType);
          oprot.WriteFieldEnd();
        }
        if (ClassName != null && __isset.className) {
          field.Name = "className";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClassName);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Data);
          oprot.WriteFieldEnd();
        }
        if (PackageName != null && __isset.packageName) {
          field.Name = "packageName";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PackageName);
          oprot.WriteFieldEnd();
        }
        if (Uti != null && __isset.uti) {
          field.Name = "uti";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uti);
          oprot.WriteFieldEnd();
        }
        if (UrlScheme != null && __isset.urlScheme) {
          field.Name = "urlScheme";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UrlScheme);
          oprot.WriteFieldEnd();
        }
        if (ImageExtension != null && __isset.imageExtension) {
          field.Name = "imageExtension";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImageExtension);
          oprot.WriteFieldEnd();
        }
        if (Annotations != null && __isset.annotations) {
          field.Name = "annotations";
          field.Type = TType.Map;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Annotations.Count));
            foreach (string _iter32 in Annotations.Keys)
            {
              oprot.WriteString(_iter32);
              oprot.WriteString(Annotations[_iter32]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THInviteProperties(");
      bool __first = true;
      if (Action != null && __isset.action) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Action: ");
        __sb.Append(Action);
      }
      if (AvailableFields != null && __isset.availableFields) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AvailableFields: ");
        __sb.Append(AvailableFields.ToDebugString());
      }
      if (ContentType != null && __isset.contentType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContentType: ");
        __sb.Append(ContentType);
      }
      if (ClassName != null && __isset.className) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClassName: ");
        __sb.Append(ClassName);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      if (PackageName != null && __isset.packageName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PackageName: ");
        __sb.Append(PackageName);
      }
      if (Uti != null && __isset.uti) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uti: ");
        __sb.Append(Uti);
      }
      if (UrlScheme != null && __isset.urlScheme) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UrlScheme: ");
        __sb.Append(UrlScheme);
      }
      if (ImageExtension != null && __isset.imageExtension) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageExtension: ");
        __sb.Append(ImageExtension);
      }
      if (Annotations != null && __isset.annotations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Annotations: ");
        __sb.Append(Annotations.ToDebugString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
