#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WebhookSettings : TBase
  {
    private string _secret;
    private string _endpoint;
    private bool _enabled;
    private List<WebhookTypes> _enabledTypes;
    private string _disabledReason;
    private long _disabledTimestamp;

    public string Secret
    {
      get
      {
        return _secret;
      }
      set
      {
        __isset.secret = true;
        this._secret = value;
      }
    }

    public string Endpoint
    {
      get
      {
        return _endpoint;
      }
      set
      {
        __isset.endpoint = true;
        this._endpoint = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _enabled;
      }
      set
      {
        __isset.enabled = true;
        this._enabled = value;
      }
    }

    public List<WebhookTypes> EnabledTypes
    {
      get
      {
        return _enabledTypes;
      }
      set
      {
        __isset.enabledTypes = true;
        this._enabledTypes = value;
      }
    }

    public string DisabledReason
    {
      get
      {
        return _disabledReason;
      }
      set
      {
        __isset.disabledReason = true;
        this._disabledReason = value;
      }
    }

    public long DisabledTimestamp
    {
      get
      {
        return _disabledTimestamp;
      }
      set
      {
        __isset.disabledTimestamp = true;
        this._disabledTimestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool secret;
      public bool endpoint;
      public bool enabled;
      public bool enabledTypes;
      public bool disabledReason;
      public bool disabledTimestamp;
    }

    public WebhookSettings() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Secret = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Endpoint = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Enabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  EnabledTypes = new List<WebhookTypes>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    WebhookTypes _elem2;
                    _elem2 = (WebhookTypes)iprot.ReadI32();
                    EnabledTypes.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                DisabledReason = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                DisabledTimestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("WebhookSettings");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Secret != null && __isset.secret) {
          field.Name = "secret";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Secret);
          oprot.WriteFieldEnd();
        }
        if (Endpoint != null && __isset.endpoint) {
          field.Name = "endpoint";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Endpoint);
          oprot.WriteFieldEnd();
        }
        if (__isset.enabled) {
          field.Name = "enabled";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Enabled);
          oprot.WriteFieldEnd();
        }
        if (EnabledTypes != null && __isset.enabledTypes) {
          field.Name = "enabledTypes";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, EnabledTypes.Count));
            foreach (WebhookTypes _iter3 in EnabledTypes)
            {
              oprot.WriteI32((int)_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DisabledReason != null && __isset.disabledReason) {
          field.Name = "disabledReason";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DisabledReason);
          oprot.WriteFieldEnd();
        }
        if (__isset.disabledTimestamp) {
          field.Name = "disabledTimestamp";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DisabledTimestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("WebhookSettings(");
      bool __first = true;
      if (Secret != null && __isset.secret) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Secret: ");
        __sb.Append(Secret);
      }
      if (Endpoint != null && __isset.endpoint) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Endpoint: ");
        __sb.Append(Endpoint);
      }
      if (__isset.enabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Enabled: ");
        __sb.Append(Enabled);
      }
      if (EnabledTypes != null && __isset.enabledTypes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EnabledTypes: ");
        __sb.Append(EnabledTypes.ToDebugString());
      }
      if (DisabledReason != null && __isset.disabledReason) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisabledReason: ");
        __sb.Append(DisabledReason);
      }
      if (__isset.disabledTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisabledTimestamp: ");
        __sb.Append(DisabledTimestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
