#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// #todo_sdk7
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CreateInviteResponse : TBase
  {
    private THInviteContentV2 _inviteContent;
    private string _inviteUrl;
    private string _token;
    private string _copycode;

    public THInviteContentV2 InviteContent
    {
      get
      {
        return _inviteContent;
      }
      set
      {
        __isset.inviteContent = true;
        this._inviteContent = value;
      }
    }

    public string InviteUrl
    {
      get
      {
        return _inviteUrl;
      }
      set
      {
        __isset.inviteUrl = true;
        this._inviteUrl = value;
      }
    }

    public string Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }

    public string Copycode
    {
      get
      {
        return _copycode;
      }
      set
      {
        __isset.copycode = true;
        this._copycode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inviteContent;
      public bool inviteUrl;
      public bool token;
      public bool copycode;
    }

    public CreateInviteResponse() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                InviteContent = new THInviteContentV2();
                InviteContent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                InviteUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Token = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Copycode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CreateInviteResponse");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InviteContent != null && __isset.inviteContent) {
          field.Name = "inviteContent";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          InviteContent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (InviteUrl != null && __isset.inviteUrl) {
          field.Name = "inviteUrl";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InviteUrl);
          oprot.WriteFieldEnd();
        }
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token);
          oprot.WriteFieldEnd();
        }
        if (Copycode != null && __isset.copycode) {
          field.Name = "copycode";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Copycode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CreateInviteResponse(");
      bool __first = true;
      if (InviteContent != null && __isset.inviteContent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteContent: ");
        __sb.Append(InviteContent== null ? "<null>" : InviteContent.ToString());
      }
      if (InviteUrl != null && __isset.inviteUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteUrl: ");
        __sb.Append(InviteUrl);
      }
      if (Token != null && __isset.token) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token);
      }
      if (Copycode != null && __isset.copycode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Copycode: ");
        __sb.Append(Copycode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
