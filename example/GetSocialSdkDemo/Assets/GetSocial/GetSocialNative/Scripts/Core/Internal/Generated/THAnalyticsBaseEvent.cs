#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class THAnalyticsBaseEvent : TBase
{
  private Dictionary<string, string> _customProperties;
  private long _deviceTime;
  private string _name;
  private string _id;
  private long _retryCount;
  private bool _isCustom;
  private THDeviceTimeType _deviceTimeType;

  public Dictionary<string, string> CustomProperties
  {
    get
    {
      return _customProperties;
    }
    set
    {
      __isset.customProperties = true;
      this._customProperties = value;
    }
  }

  public long DeviceTime
  {
    get
    {
      return _deviceTime;
    }
    set
    {
      __isset.deviceTime = true;
      this._deviceTime = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  /// <summary>
  /// Used to prevent replay attack like scenarios.
  /// </summary>
  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  /// <summary>
  /// specifies how many times the event failed to be sent
  /// </summary>
  public long RetryCount
  {
    get
    {
      return _retryCount;
    }
    set
    {
      __isset.retryCount = true;
      this._retryCount = value;
    }
  }

  /// <summary>
  /// specifies events sent by developer
  /// </summary>
  public bool IsCustom
  {
    get
    {
      return _isCustom;
    }
    set
    {
      __isset.isCustom = true;
      this._isCustom = value;
    }
  }

  /// <summary>
  /// specifies device time type
  /// 
  /// <seealso cref="THDeviceTimeType"/>
  /// </summary>
  public THDeviceTimeType DeviceTimeType
  {
    get
    {
      return _deviceTimeType;
    }
    set
    {
      __isset.deviceTimeType = true;
      this._deviceTimeType = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool customProperties;
    public bool deviceTime;
    public bool name;
    public bool id;
    public bool retryCount;
    public bool isCustom;
    public bool deviceTimeType;
  }

  public THAnalyticsBaseEvent() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                CustomProperties = new Dictionary<string, string>();
                TMap _map5 = iprot.ReadMapBegin();
                for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                {
                  string _key7;
                  string _val8;
                  _key7 = iprot.ReadString();
                  _val8 = iprot.ReadString();
                  CustomProperties[_key7] = _val8;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              DeviceTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              RetryCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              IsCustom = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              DeviceTimeType = (THDeviceTimeType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("THAnalyticsBaseEvent");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (CustomProperties != null && __isset.customProperties) {
        field.Name = "customProperties";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, CustomProperties.Count));
          foreach (string _iter9 in CustomProperties.Keys)
          {
            oprot.WriteString(_iter9);
            oprot.WriteString(CustomProperties[_iter9]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.deviceTime) {
        field.Name = "deviceTime";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DeviceTime);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.retryCount) {
        field.Name = "retryCount";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RetryCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCustom) {
        field.Name = "isCustom";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCustom);
        oprot.WriteFieldEnd();
      }
      if (__isset.deviceTimeType) {
        field.Name = "deviceTimeType";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)DeviceTimeType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("THAnalyticsBaseEvent(");
    bool __first = true;
    if (CustomProperties != null && __isset.customProperties) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CustomProperties: ");
      __sb.Append(CustomProperties);
    }
    if (__isset.deviceTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceTime: ");
      __sb.Append(DeviceTime);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.retryCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RetryCount: ");
      __sb.Append(RetryCount);
    }
    if (__isset.isCustom) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IsCustom: ");
      __sb.Append(IsCustom);
    }
    if (__isset.deviceTimeType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceTimeType: ");
      __sb.Append(DeviceTimeType);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}
#endif
