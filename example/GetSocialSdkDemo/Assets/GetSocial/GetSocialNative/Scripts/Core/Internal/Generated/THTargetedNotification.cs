#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THTargetedNotification : TBase
  {
    private string _name;
    private Dictionary<string, string> _title;
    private Dictionary<string, string> _text;
    private int _timezone;
    private THTargetedNotificationStatus _status;
    private Dictionary<string, string> _properties;
    private string _audienceId;
    private string _sendAfter;
    private string _id;
    private string _appId;
    private int _createdAt;
    private int _sentCount;
    private THAction _action;
    private THTargetType _targetType;
    private List<string> _deviceIds;
    private List<THActionButtonLocalized> _actionButtons;
    private int _expiryMin;
    private string _image;
    private string _video;
    private THNotificationTemplate _template;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public Dictionary<string, string> Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public Dictionary<string, string> Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }

    public int Timezone
    {
      get
      {
        return _timezone;
      }
      set
      {
        __isset.timezone = true;
        this._timezone = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="THTargetedNotificationStatus"/>
    /// </summary>
    public THTargetedNotificationStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public Dictionary<string, string> Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public string AudienceId
    {
      get
      {
        return _audienceId;
      }
      set
      {
        __isset.audienceId = true;
        this._audienceId = value;
      }
    }

    public string SendAfter
    {
      get
      {
        return _sendAfter;
      }
      set
      {
        __isset.sendAfter = true;
        this._sendAfter = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        this._appId = value;
      }
    }

    public int CreatedAt
    {
      get
      {
        return _createdAt;
      }
      set
      {
        __isset.createdAt = true;
        this._createdAt = value;
      }
    }

    public int SentCount
    {
      get
      {
        return _sentCount;
      }
      set
      {
        __isset.sentCount = true;
        this._sentCount = value;
      }
    }

    public THAction Action
    {
      get
      {
        return _action;
      }
      set
      {
        __isset.action = true;
        this._action = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="THTargetType"/>
    /// </summary>
    public THTargetType TargetType
    {
      get
      {
        return _targetType;
      }
      set
      {
        __isset.targetType = true;
        this._targetType = value;
      }
    }

    public List<string> DeviceIds
    {
      get
      {
        return _deviceIds;
      }
      set
      {
        __isset.deviceIds = true;
        this._deviceIds = value;
      }
    }

    public List<THActionButtonLocalized> ActionButtons
    {
      get
      {
        return _actionButtons;
      }
      set
      {
        __isset.actionButtons = true;
        this._actionButtons = value;
      }
    }

    public int ExpiryMin
    {
      get
      {
        return _expiryMin;
      }
      set
      {
        __isset.expiryMin = true;
        this._expiryMin = value;
      }
    }

    public string Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public string Video
    {
      get
      {
        return _video;
      }
      set
      {
        __isset.video = true;
        this._video = value;
      }
    }

    public THNotificationTemplate Template
    {
      get
      {
        return _template;
      }
      set
      {
        __isset.template = true;
        this._template = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool title;
      public bool text;
      public bool timezone;
      public bool status;
      public bool properties;
      public bool audienceId;
      public bool sendAfter;
      public bool id;
      public bool appId;
      public bool createdAt;
      public bool sentCount;
      public bool action;
      public bool targetType;
      public bool deviceIds;
      public bool actionButtons;
      public bool expiryMin;
      public bool image;
      public bool video;
      public bool template;
    }

    public THTargetedNotification() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Title = new Dictionary<string, string>();
                  TMap _map56 = iprot.ReadMapBegin();
                  for( int _i57 = 0; _i57 < _map56.Count; ++_i57)
                  {
                    string _key58;
                    string _val59;
                    _key58 = iprot.ReadString();
                    _val59 = iprot.ReadString();
                    Title[_key58] = _val59;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Text = new Dictionary<string, string>();
                  TMap _map60 = iprot.ReadMapBegin();
                  for( int _i61 = 0; _i61 < _map60.Count; ++_i61)
                  {
                    string _key62;
                    string _val63;
                    _key62 = iprot.ReadString();
                    _val63 = iprot.ReadString();
                    Text[_key62] = _val63;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Timezone = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Status = (THTargetedNotificationStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map64 = iprot.ReadMapBegin();
                  for( int _i65 = 0; _i65 < _map64.Count; ++_i65)
                  {
                    string _key66;
                    string _val67;
                    _key66 = iprot.ReadString();
                    _val67 = iprot.ReadString();
                    Properties[_key66] = _val67;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                AudienceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                SendAfter = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                AppId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                CreatedAt = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                SentCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                Action = new THAction();
                Action.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                TargetType = (THTargetType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.List) {
                {
                  DeviceIds = new List<string>();
                  TList _list68 = iprot.ReadListBegin();
                  for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                  {
                    string _elem70;
                    _elem70 = iprot.ReadString();
                    DeviceIds.Add(_elem70);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.List) {
                {
                  ActionButtons = new List<THActionButtonLocalized>();
                  TList _list71 = iprot.ReadListBegin();
                  for( int _i72 = 0; _i72 < _list71.Count; ++_i72)
                  {
                    THActionButtonLocalized _elem73;
                    _elem73 = new THActionButtonLocalized();
                    _elem73.Read(iprot);
                    ActionButtons.Add(_elem73);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.I32) {
                ExpiryMin = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.String) {
                Image = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                Video = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Struct) {
                Template = new THNotificationTemplate();
                Template.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THTargetedNotification");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Title.Count));
            foreach (string _iter74 in Title.Keys)
            {
              oprot.WriteString(_iter74);
              oprot.WriteString(Title[_iter74]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Text != null && __isset.text) {
          field.Name = "text";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Text.Count));
            foreach (string _iter75 in Text.Keys)
            {
              oprot.WriteString(_iter75);
              oprot.WriteString(Text[_iter75]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.timezone) {
          field.Name = "timezone";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timezone);
          oprot.WriteFieldEnd();
        }
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Status);
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.properties) {
          field.Name = "properties";
          field.Type = TType.Map;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter76 in Properties.Keys)
            {
              oprot.WriteString(_iter76);
              oprot.WriteString(Properties[_iter76]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AudienceId != null && __isset.audienceId) {
          field.Name = "audienceId";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AudienceId);
          oprot.WriteFieldEnd();
        }
        if (SendAfter != null && __isset.sendAfter) {
          field.Name = "sendAfter";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SendAfter);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (AppId != null && __isset.appId) {
          field.Name = "appId";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppId);
          oprot.WriteFieldEnd();
        }
        if (__isset.createdAt) {
          field.Name = "createdAt";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CreatedAt);
          oprot.WriteFieldEnd();
        }
        if (__isset.sentCount) {
          field.Name = "sentCount";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SentCount);
          oprot.WriteFieldEnd();
        }
        if (Action != null && __isset.action) {
          field.Name = "action";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          Action.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.targetType) {
          field.Name = "targetType";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)TargetType);
          oprot.WriteFieldEnd();
        }
        if (DeviceIds != null && __isset.deviceIds) {
          field.Name = "deviceIds";
          field.Type = TType.List;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, DeviceIds.Count));
            foreach (string _iter77 in DeviceIds)
            {
              oprot.WriteString(_iter77);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ActionButtons != null && __isset.actionButtons) {
          field.Name = "actionButtons";
          field.Type = TType.List;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ActionButtons.Count));
            foreach (THActionButtonLocalized _iter78 in ActionButtons)
            {
              _iter78.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.expiryMin) {
          field.Name = "expiryMin";
          field.Type = TType.I32;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ExpiryMin);
          oprot.WriteFieldEnd();
        }
        if (Image != null && __isset.image) {
          field.Name = "image";
          field.Type = TType.String;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Image);
          oprot.WriteFieldEnd();
        }
        if (Video != null && __isset.video) {
          field.Name = "video";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Video);
          oprot.WriteFieldEnd();
        }
        if (Template != null && __isset.template) {
          field.Name = "template";
          field.Type = TType.Struct;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          Template.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THTargetedNotification(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title.ToDebugString());
      }
      if (Text != null && __isset.text) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Text: ");
        __sb.Append(Text.ToDebugString());
      }
      if (__isset.timezone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timezone: ");
        __sb.Append(Timezone);
      }
      if (__isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status);
      }
      if (Properties != null && __isset.properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties.ToDebugString());
      }
      if (AudienceId != null && __isset.audienceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AudienceId: ");
        __sb.Append(AudienceId);
      }
      if (SendAfter != null && __isset.sendAfter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SendAfter: ");
        __sb.Append(SendAfter);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (AppId != null && __isset.appId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppId: ");
        __sb.Append(AppId);
      }
      if (__isset.createdAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedAt: ");
        __sb.Append(CreatedAt);
      }
      if (__isset.sentCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SentCount: ");
        __sb.Append(SentCount);
      }
      if (Action != null && __isset.action) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Action: ");
        __sb.Append(Action== null ? "<null>" : Action.ToString());
      }
      if (__isset.targetType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TargetType: ");
        __sb.Append(TargetType);
      }
      if (DeviceIds != null && __isset.deviceIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceIds: ");
        __sb.Append(DeviceIds.ToDebugString());
      }
      if (ActionButtons != null && __isset.actionButtons) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionButtons: ");
        __sb.Append(ActionButtons.ToDebugString());
      }
      if (__isset.expiryMin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpiryMin: ");
        __sb.Append(ExpiryMin);
      }
      if (Image != null && __isset.image) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Image: ");
        __sb.Append(Image);
      }
      if (Video != null && __isset.video) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Video: ");
        __sb.Append(Video);
      }
      if (Template != null && __isset.template) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Template: ");
        __sb.Append(Template== null ? "<null>" : Template.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
