#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  /// <summary>
  /// check field.ValueType for every cell.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryResult : TBase
  {
    private Status _status;
    private List<Dictionary<string, ValueType>> _columns;
    private List<List<Field>> _rows;
    private string _error;

    /// <summary>
    /// 
    /// <seealso cref="Status"/>
    /// </summary>
    public Status Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public List<Dictionary<string, ValueType>> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public List<List<Field>> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    public string Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool status;
      public bool columns;
      public bool rows;
      public bool error;
    }

    public QueryResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Status = (Status)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Columns = new List<Dictionary<string, ValueType>>();
                  TList _list5 = iprot.ReadListBegin();
                  for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                  {
                    Dictionary<string, ValueType> _elem7;
                    {
                      _elem7 = new Dictionary<string, ValueType>();
                      TMap _map8 = iprot.ReadMapBegin();
                      for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                      {
                        string _key10;
                        ValueType _val11;
                        _key10 = iprot.ReadString();
                        _val11 = (ValueType)iprot.ReadI32();
                        _elem7[_key10] = _val11;
                      }
                      iprot.ReadMapEnd();
                    }
                    Columns.Add(_elem7);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Rows = new List<List<Field>>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    List<Field> _elem14;
                    {
                      _elem14 = new List<Field>();
                      TList _list15 = iprot.ReadListBegin();
                      for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                      {
                        Field _elem17;
                        _elem17 = new Field();
                        _elem17.Read(iprot);
                        _elem14.Add(_elem17);
                      }
                      iprot.ReadListEnd();
                    }
                    Rows.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Error = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("QueryResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Status);
          oprot.WriteFieldEnd();
        }
        if (Columns != null && __isset.columns) {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Map, Columns.Count));
            foreach (Dictionary<string, ValueType> _iter18 in Columns)
            {
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.I32, _iter18.Count));
                foreach (string _iter19 in _iter18.Keys)
                {
                  oprot.WriteString(_iter19);
                  oprot.WriteI32((int)_iter18[_iter19]);
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Rows != null && __isset.rows) {
          field.Name = "rows";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Rows.Count));
            foreach (List<Field> _iter20 in Rows)
            {
              {
                oprot.WriteListBegin(new TList(TType.Struct, _iter20.Count));
                foreach (Field _iter21 in _iter20)
                {
                  _iter21.Write(oprot);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Error != null && __isset.error) {
          field.Name = "error";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Error);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryResult(");
      bool __first = true;
      if (__isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status);
      }
      if (Columns != null && __isset.columns) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Columns: ");
        __sb.Append(Columns.ToDebugString());
      }
      if (Rows != null && __isset.rows) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rows: ");
        __sb.Append(Rows.ToDebugString());
      }
      if (Error != null && __isset.error) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Error: ");
        __sb.Append(Error);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
