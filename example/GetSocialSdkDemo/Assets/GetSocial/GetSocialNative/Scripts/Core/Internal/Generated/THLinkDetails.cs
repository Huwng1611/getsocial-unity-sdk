#if UNITY_STANDALONE_WIN || UNITY_STANDALONE_OSX || UNITY_EDITOR
/**
 * Autogenerated by Thrift Compiler ()
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace GetSocialSdk.Core 
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class THLinkDetails : TBase
  {
    private string _id;
    private string _appId;
    private long _dateCreated;
    private THLinkType _type;
    private string _token;
    private string _channel;
    private string _campaignId;
    private string _medium;
    private string _referrerUserId;
    private string _referrerDeviceId;
    private Dictionary<string, string> _customData;
    private List<THClickDetails> _clicks;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        this._appId = value;
      }
    }

    public long DateCreated
    {
      get
      {
        return _dateCreated;
      }
      set
      {
        __isset.dateCreated = true;
        this._dateCreated = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="THLinkType"/>
    /// </summary>
    public THLinkType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public string CampaignId
    {
      get
      {
        return _campaignId;
      }
      set
      {
        __isset.campaignId = true;
        this._campaignId = value;
      }
    }

    public string Medium
    {
      get
      {
        return _medium;
      }
      set
      {
        __isset.medium = true;
        this._medium = value;
      }
    }

    public string ReferrerUserId
    {
      get
      {
        return _referrerUserId;
      }
      set
      {
        __isset.referrerUserId = true;
        this._referrerUserId = value;
      }
    }

    public string ReferrerDeviceId
    {
      get
      {
        return _referrerDeviceId;
      }
      set
      {
        __isset.referrerDeviceId = true;
        this._referrerDeviceId = value;
      }
    }

    public Dictionary<string, string> CustomData
    {
      get
      {
        return _customData;
      }
      set
      {
        __isset.customData = true;
        this._customData = value;
      }
    }

    public List<THClickDetails> Clicks
    {
      get
      {
        return _clicks;
      }
      set
      {
        __isset.clicks = true;
        this._clicks = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool appId;
      public bool dateCreated;
      public bool type;
      public bool token;
      public bool channel;
      public bool campaignId;
      public bool medium;
      public bool referrerUserId;
      public bool referrerDeviceId;
      public bool customData;
      public bool clicks;
    }

    public THLinkDetails() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AppId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                DateCreated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Type = (THLinkType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Token = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                CampaignId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Medium = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                ReferrerUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                ReferrerDeviceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Map) {
                {
                  CustomData = new Dictionary<string, string>();
                  TMap _map77 = iprot.ReadMapBegin();
                  for( int _i78 = 0; _i78 < _map77.Count; ++_i78)
                  {
                    string _key79;
                    string _val80;
                    _key79 = iprot.ReadString();
                    _val80 = iprot.ReadString();
                    CustomData[_key79] = _val80;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  Clicks = new List<THClickDetails>();
                  TList _list81 = iprot.ReadListBegin();
                  for( int _i82 = 0; _i82 < _list81.Count; ++_i82)
                  {
                    THClickDetails _elem83;
                    _elem83 = new THClickDetails();
                    _elem83.Read(iprot);
                    Clicks.Add(_elem83);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("THLinkDetails");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (AppId != null && __isset.appId) {
          field.Name = "appId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppId);
          oprot.WriteFieldEnd();
        }
        if (__isset.dateCreated) {
          field.Name = "dateCreated";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DateCreated);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token);
          oprot.WriteFieldEnd();
        }
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (CampaignId != null && __isset.campaignId) {
          field.Name = "campaignId";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CampaignId);
          oprot.WriteFieldEnd();
        }
        if (Medium != null && __isset.medium) {
          field.Name = "medium";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Medium);
          oprot.WriteFieldEnd();
        }
        if (ReferrerUserId != null && __isset.referrerUserId) {
          field.Name = "referrerUserId";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReferrerUserId);
          oprot.WriteFieldEnd();
        }
        if (ReferrerDeviceId != null && __isset.referrerDeviceId) {
          field.Name = "referrerDeviceId";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReferrerDeviceId);
          oprot.WriteFieldEnd();
        }
        if (CustomData != null && __isset.customData) {
          field.Name = "customData";
          field.Type = TType.Map;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, CustomData.Count));
            foreach (string _iter84 in CustomData.Keys)
            {
              oprot.WriteString(_iter84);
              oprot.WriteString(CustomData[_iter84]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Clicks != null && __isset.clicks) {
          field.Name = "clicks";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Clicks.Count));
            foreach (THClickDetails _iter85 in Clicks)
            {
              _iter85.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("THLinkDetails(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (AppId != null && __isset.appId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppId: ");
        __sb.Append(AppId);
      }
      if (__isset.dateCreated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DateCreated: ");
        __sb.Append(DateCreated);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Token != null && __isset.token) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token);
      }
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (CampaignId != null && __isset.campaignId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CampaignId: ");
        __sb.Append(CampaignId);
      }
      if (Medium != null && __isset.medium) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Medium: ");
        __sb.Append(Medium);
      }
      if (ReferrerUserId != null && __isset.referrerUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReferrerUserId: ");
        __sb.Append(ReferrerUserId);
      }
      if (ReferrerDeviceId != null && __isset.referrerDeviceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReferrerDeviceId: ");
        __sb.Append(ReferrerDeviceId);
      }
      if (CustomData != null && __isset.customData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CustomData: ");
        __sb.Append(CustomData.ToDebugString());
      }
      if (Clicks != null && __isset.clicks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Clicks: ");
        __sb.Append(Clicks.ToDebugString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
#endif
